@model RIPASTOP.Models.UserProfile

@{
    ViewBag.Title = "Create Profile";
}

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="list-section">
        <h3>First time user profile creation. </h3>
      
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
       
            @Html.LabelFor(model => model.Agency, htmlAttributes: new { @class = "list-item" })
          
                @Html.EditorFor(model => model.Agency, new { htmlAttributes = new { @class = "list-item", Value = "SH", Readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Agency, "", new { @class = "text-danger" })
    
            @Html.LabelFor(model => model.ORI, htmlAttributes: new { @class = "list-item" })
           
                @Html.EditorFor(model => model.ORI, new { htmlAttributes = new { @class = "list-item", Value = "CA0370000", Readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.ORI, "", new { @class = "text-danger" })
         
     
            @Html.LabelFor(model => model.Years, htmlAttributes: new { @class = "list-item" })
           
                @Html.EditorFor(model => model.Years, new { htmlAttributes = new { @class = "list-item" } })
                @Html.ValidationMessageFor(model => model.Years, "", new { @class = "text-danger" })
         
      
            @Html.LabelFor(model => model.Assignment, htmlAttributes: new { @class = "list-item" })
           
            @*@Html.EditorFor(model => model.Assignment, new { htmlAttributes = new { @class = "form-control" } })*@
            @{
                List<SelectListItem> listItems = new List<SelectListItem>();
                listItems.Add(new SelectListItem
                {
                    Text = "Patrol, traffic enforcement, field operations",
                    Value = "1 Patrol, traffic enforcement, field operations"
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Gang enforcement",
                    Value = "2 Gang enforcement",
                    Selected = true
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Compliance check",
                    Value = "3 Compliance check"
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Special events",
                    Value = "4 Special events"
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Roadblock or DUI sobriety checkpoint",
                    Value = "5 Roadblock or DUI sobriety checkpoint"
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Narcotics/vice",
                    Value = "6 Narcotics/vice"
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Task force",
                    Value = "7 Task force"
                });
                listItems.Add(new SelectListItem
                {
                    Text = "K1-12 public school inlcuding school resource officer or school police officer",
                    Value = "8 K1-12 public school inlcuding school resource officer or school police officer"
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Investigative/detective",
                    Value = "9 Investigative/detective"
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Other",
                    Value = "10 Other"
                });
            }
            @Html.DropDownListFor(model => model.Assignment, listItems, htmlAttributes: new { @class = "" })
       
        
        @Html.ValidationMessageFor(model => model.Assignment, "", new { @class = "text-danger" })

        <label class="list-item" for="AssignmentOther">Description of Other Assignment</label>

        @Html.EditorFor(model => model.AssignmentOther, new { htmlAttributes = new { @class = "list-item" } })
        @Html.ValidationMessageFor(model => model.AssignmentOther, "", new { @class = "text-danger" })
        @ViewBag.ErrorOtherType


           
        <div class="button-container">
            <input type="submit" value="Create" class="button" />
        </div>

       
        
    </div>
}


