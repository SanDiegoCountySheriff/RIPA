<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MsieJavaScriptEngine</name>
    </assembly>
    <members>
        <member name="T:MsieJavaScriptEngine.HostItemBase">
            <summary>
            Base class of item, that implements <see cref="T:System.Reflection.IReflect"/> interface
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.HostItemBase._type">
            <summary>
            Target type
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.HostItemBase._target">
            <summary>
            Target object
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.HostItemBase._engineMode">
            <summary>
            JavaScript engine mode
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.HostItemBase._fields">
            <summary>
            List of fields
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.HostItemBase._properties">
            <summary>
            List of properties
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.HostItemBase._methods">
            <summary>
            List of methods
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.HostItemBase.Target">
            <summary>
            Gets a target object
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.HostItemBase.#ctor(System.Type,System.Object,MsieJavaScriptEngine.JsEngineMode,System.Boolean)">
            <summary>
            Constructs an instance of the wrapper for item, that implements <see cref="T:System.Reflection.IReflect"/> interface
            </summary>
            <param name="type">Target type</param>
            <param name="target">Target object</param>
            <param name="engineMode">JavaScript engine mode</param>
            <param name="instance">Flag for whether to allow access to members of the instance</param>
        </member>
        <member name="T:MsieJavaScriptEngine.HostObject">
            <summary>
            Wrapper for object, that implements <see cref="T:System.Reflection.IReflect"/> interface
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.HostObject.#ctor(System.Object,MsieJavaScriptEngine.JsEngineMode)">
            <summary>
            Constructs an instance of the wrapper for object, that implements <see cref="T:System.Reflection.IReflect"/> interface
            </summary>
            <param name="target">Target object</param>
            <param name="engineMode">JavaScript engine mode</param>
        </member>
        <member name="T:MsieJavaScriptEngine.HostType">
            <summary>
            Wrapper for type, that implements <see cref="T:System.Reflection.IReflect"/> interface
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.HostType.#ctor(System.Type,MsieJavaScriptEngine.JsEngineMode)">
            <summary>
            Constructs an instance of the wrapper for type, that implements <see cref="T:System.Reflection.IReflect"/> interface
            </summary>
            <param name="type">Target type</param>
            <param name="engineMode">JavaScript engine mode</param>
        </member>
        <member name="T:MsieJavaScriptEngine.IInnerJsEngine">
            <summary>
            Interface for the inner JavaScript engine
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.IInnerJsEngine.Mode">
            <summary>
            Gets a name of JavaScript engine mode
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.IInnerJsEngine.Evaluate(System.String)">
            <summary>
            Evaluates an expression
            </summary>
            <param name="expression">JavaScript expression</param>
            <returns>Result of the expression</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.IInnerJsEngine.Execute(System.String)">
            <summary>
            Executes a code
            </summary>
            <param name="code">JavaScript code</param>
        </member>
        <member name="M:MsieJavaScriptEngine.IInnerJsEngine.CallFunction(System.String,System.Object[])">
            <summary>
            Calls a function
            </summary>
            <param name="functionName">Function name</param>
            <param name="args">Function arguments</param>
            <returns>Result of the function execution</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.IInnerJsEngine.HasVariable(System.String)">
            <summary>
            Ð¡hecks for the existence of a variable
            </summary>
            <param name="variableName">Name of variable</param>
            <returns>Result of check (true - exists; false - not exists</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.IInnerJsEngine.GetVariableValue(System.String)">
            <summary>
            Gets a value of variable
            </summary>
            <param name="variableName">Name of variable</param>
            <returns>Value of variable</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.IInnerJsEngine.SetVariableValue(System.String,System.Object)">
            <summary>
            Sets a value of variable
            </summary>
            <param name="variableName">Name of variable</param>
            <param name="value">Value of variable</param>
        </member>
        <member name="M:MsieJavaScriptEngine.IInnerJsEngine.RemoveVariable(System.String)">
            <summary>
            Removes a variable
            </summary>
            <param name="variableName">Name of variable</param>
        </member>
        <member name="M:MsieJavaScriptEngine.IInnerJsEngine.EmbedHostObject(System.String,System.Object)">
            <summary>
            Embeds a host object to script code
            </summary>
            <param name="itemName">The name for the new global variable or function that will represent the object</param>
            <param name="value">The object to expose</param>
            <remarks>Allows to embed instances of simple classes (or structures) and delegates.</remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.IInnerJsEngine.EmbedHostType(System.String,System.Type)">
            <summary>
            Embeds a host type to script code
            </summary>
            <param name="itemName">The name for the new global variable that will represent the type</param>
            <param name="type">The type to expose</param>
            <remarks>
            Host types are exposed to script code in the form of objects whose properties and
            methods are bound to the type's static members.
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.IInnerJsEngine.CollectGarbage">
            <summary>
            Performs a full garbage collection
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsEngineLoadException">
            <summary>
            The exception that is thrown when a loading of JS engine is failed
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsEngineLoadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsEngineLoadException"/> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsEngineLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsEngineLoadException"/> class
            with a specified error message and a reference to the inner exception
            that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsEngineLoadException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsEngineLoadException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="engineMode">Name of JS engine mode</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsEngineLoadException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsEngineLoadException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="engineMode">Name of JS engine mode</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsEngineLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsEngineLoadException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsEngineMode">
            <summary>
            JavaScript engine modes
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsEngineMode.Auto">
            <summary>
            Automatically selects the most modern JavaScript engine from available on the machine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsEngineMode.Classic">
            <summary>
            Classic MSIE JavaScript engine (supports ECMAScript 3 with
            possibility of using the ECMAScript 5 Polyfill and the JSON2 library).
            Requires Internet Explorer 6 or higher on the machine.
            Not supported in version for .NET Core.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsEngineMode.ChakraActiveScript">
            <summary>
            ActiveScript version of Chakra JavaScript engine (supports ECMAScript 5).
            Requires Internet Explorer 9 or higher on the machine.
            Not supported in version for .NET Core.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsEngineMode.ChakraIeJsRt">
            <summary>
            âIEâ JsRT version of Chakra JavaScript engine (supports ECMAScript 5).
            Requires Internet Explorer 11 or Microsoft Edge on the machine.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsEngineMode.ChakraEdgeJsRt">
            <summary>
            âEdgeâ JsRT version of Chakra JavaScript engine (supports ECMAScript 5).
            Requires Microsoft Edge on the machine.
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsEngineSettings">
            <summary>
            JavaScript engine settings
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsEngineSettings.EnableDebugging">
            <summary>
            Gets or sets a flag for whether to enable script debugging features
            (only works in the <code>ChakraIeJsRt</code> and <code>ChakraEdgeJsRt</code> modes)
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsEngineSettings.EngineMode">
            <summary>
            Gets or sets a JavaScript engine mode
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsEngineSettings.UseEcmaScript5Polyfill">
            <summary>
            Gets or sets a flag for whether to use the ECMAScript 5 Polyfill
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsEngineSettings.UseJson2Library">
            <summary>
            Gets or sets a flag for whether to use the JSON2 library
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsEngineSettings.#ctor">
            <summary>
            Constructs instance of JavaScript engine settings
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsException">
            <summary>
            The exception that is thrown during the work of JS engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsException._engineMode">
            <summary>
            JS engine mode
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsException.EngineMode">
            <summary>
            Gets a name of JS engine mode
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsException"/> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsException"/> class
            with a specified error message and a reference to the inner exception
            that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="engineMode">Name of JS engine mode</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="engineMode">Name of JS engine mode</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRuntimeException">
            <summary>
            The exception that is thrown during a execution of code by JS engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRuntimeException._errorCode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRuntimeException._category">
            <summary>
            Error category
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRuntimeException._lineNumber">
            <summary>
            Line number
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRuntimeException._columnNumber">
            <summary>
            Column number
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRuntimeException._sourceFragment">
            <summary>
            Source fragment
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRuntimeException.ErrorCode">
            <summary>
            Gets or sets a error code
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRuntimeException.Category">
            <summary>
            Gets or sets a error category
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRuntimeException.LineNumber">
            <summary>
            Gets or sets a line number
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRuntimeException.ColumnNumber">
            <summary>
            Gets or sets a column number
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRuntimeException.SourceFragment">
            <summary>
            Gets or sets a source fragment
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRuntimeException"/> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRuntimeException"/> class
            with a specified error message and a reference to the inner exception
            that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRuntimeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRuntimeException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="engineMode">Name of JS engine mode</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRuntimeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRuntimeException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="engineMode">Name of JS engine mode</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRuntimeException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRuntimeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization</param>
        </member>
        <member name="T:MsieJavaScriptEngine.MsieJsEngine">
            <summary>
            .NET-wrapper for working with the Internet Explorer's JavaScript engines
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.MsieJsEngine._jsEngine">
            <summary>
            JavaScript engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.MsieJsEngine._currentMode">
            <summary>
            Current JavaScript engine mode
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.MsieJsEngine._creationSynchronizer">
            <summary>
            Synchronizer of JavaScript engines creation
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.MsieJsEngine._disposedFlag">
            <summary>
            Flag that object is destroyed
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.MsieJsEngine.Mode">
            <summary>
            Gets a name of JavaScript engine mode
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.#ctor">
            <summary>
            Constructs instance of MSIE JavaScript engine
            </summary>
            <exception cref="T:MsieJavaScriptEngine.JsEngineLoadException">Failed to load a JavaScript engine.</exception>
            <exception cref="T:System.NotSupportedException">Selected mode of JavaScript engine is not supported.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.#ctor(MsieJavaScriptEngine.JsEngineSettings)">
            <summary>
            Constructs instance of MSIE JavaScript engine
            </summary>
            <param name="settings">JavaScript engine settings</param>
            <exception cref="T:MsieJavaScriptEngine.JsEngineLoadException">Failed to load a JavaScript engine.</exception>
            <exception cref="T:System.NotSupportedException">Selected mode of JavaScript engine is not supported.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.Evaluate(System.String)">
            <summary>
            Evaluates an expression
            </summary>
            <param name="expression">JavaScript expression</param>
            <returns>Result of the expression</returns>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.Evaluate``1(System.String)">
            <summary>
            Evaluates an expression
            </summary>
            <typeparam name="T">Type of result</typeparam>
            <param name="expression">JavaScript expression</param>
            <returns>Result of the expression</returns>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:MsieJavaScriptEngine.NotSupportedTypeException">The type of return value
            is not supported.</exception>
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.Execute(System.String)">
            <summary>
            Executes a code
            </summary>
            <param name="code">JavaScript code</param>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.ExecuteFile(System.String,System.Text.Encoding)">
            <summary>
            Executes a code from JS-file
            </summary>
            <param name="path">Path to the JS-file</param>
            <param name="encoding">Text encoding</param>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.IO.FileNotFoundException">Specified JS-file not found.</exception>
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.ExecuteResource(System.String,System.Type)">
            <summary>
            Executes a code from embedded JS-resource
            </summary>
            <param name="resourceName">The case-sensitive resource name without the namespace of the specified type</param>
            <param name="type">The type, that determines the assembly and whose namespace is used to scope
            the resource name</param>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.ExecuteResource(System.String,System.Reflection.Assembly)">
            <summary>
            Executes a code from embedded JS-resource
            </summary>
            <param name="resourceName">The case-sensitive resource name</param>
            <param name="assembly">The assembly, which contains the embedded resource</param>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.CallFunction(System.String,System.Object[])">
            <summary>
            Calls a function
            </summary>
            <param name="functionName">Function name</param>
            <param name="args">Function arguments</param>
            <returns>Result of the function execution</returns>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.FormatException">The function name has incorrect format.</exception>
            <exception cref="T:MsieJavaScriptEngine.NotSupportedTypeException">The type of one function
            parameter is not supported.</exception>
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.CallFunction``1(System.String,System.Object[])">
            <summary>
            Calls a function
            </summary>
            <typeparam name="T">Type of function result</typeparam>
            <param name="functionName">Function name</param>
            <param name="args">Function arguments</param>
            <returns>Result of the function execution</returns>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.FormatException">The function name has incorrect format.</exception>
            <exception cref="T:MsieJavaScriptEngine.NotSupportedTypeException">The type of return value or
            one function parameter is not supported.</exception>
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.HasVariable(System.String)">
            <summary>
            Ð¡hecks for the existence of a variable
            </summary>
            <param name="variableName">Name of variable</param>
            <returns>Result of check (true - exists; false - not exists</returns>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.FormatException">The variable name has incorrect format.</exception>
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.GetVariableValue(System.String)">
            <summary>
            Gets a value of variable
            </summary>
            <param name="variableName">Name of variable</param>
            <returns>Value of variable</returns>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.FormatException">The variable name has incorrect format.</exception>
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.GetVariableValue``1(System.String)">
            <summary>
            Gets a value of variable
            </summary>
            <typeparam name="T">Type of variable</typeparam>
            <param name="variableName">Name of variable</param>
            <returns>Value of variable</returns>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.FormatException">The variable name has incorrect format.</exception>
            <exception cref="T:MsieJavaScriptEngine.NotSupportedTypeException">The type of return value
            is not supported.</exception>
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.SetVariableValue(System.String,System.Object)">
            <summary>
            Sets a value of variable
            </summary>
            <param name="variableName">Name of variable</param>
            <param name="value">Value of variable</param>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.FormatException">The variable name has incorrect format.</exception>
            <exception cref="T:MsieJavaScriptEngine.NotSupportedTypeException">The type of variable value
            is not supported.</exception>
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.RemoveVariable(System.String)">
            <summary>
            Removes a variable
            </summary>
            <param name="variableName">Name of variable</param>
            <exception cref="T:System.ObjectDisposedException">Operation is performed on a disposed MSIE
            JavaScript engine.</exception>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.FormatException">The variable name has incorrect format.</exception>
            <exception cref="T:MsieJavaScriptEngine.JsRuntimeException">JavaScript runtime error.</exception>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.EmbedHostObject(System.String,System.Object)">
            <summary>
            Embeds a host object to script code
            </summary>
            <param name="itemName">The name for the new global variable or function that will represent the object</param>
            <param name="value">The object to expose</param>
            <remarks>Allows to embed instances of simple classes (or structures) and delegates.</remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.EmbedHostType(System.String,System.Type)">
            <summary>
            Embeds a host type to script code
            </summary>
            <param name="itemName">The name for the new global variable that will represent the type</param>
            <param name="type">The type to expose</param>
            <remarks>
            Host types are exposed to script code in the form of objects whose properties and
            methods are bound to the type's static members.
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.CollectGarbage">
            <summary>
            Performs a full garbage collection
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.MsieJsEngine.Dispose">
            <summary>
            Destroys object
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.NotSupportedTypeException">
            <summary>
            The exception that is thrown when a .NET type is not supported by JS engine
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.NotSupportedTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.NotSupportedTypeException"/> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:MsieJavaScriptEngine.NotSupportedTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.NotSupportedTypeException"/> class
            with a specified error message and a reference to the inner exception
            that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="M:MsieJavaScriptEngine.NotSupportedTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.NotSupportedTypeException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:MsieJavaScriptEngine.ScriptDispatcher">
            <summary>
            Provides services for managing the queue of script tasks on the thread with increased stack size
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ScriptDispatcher.STACK_SIZE_32">
            <summary>
            The stack size is sufficient to run the code of modern JavaScript libraries in 32-bit process
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ScriptDispatcher.STACK_SIZE_64">
            <summary>
            The stack size is sufficient to run the code of modern JavaScript libraries in 64-bit process
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ScriptDispatcher._thread">
            <summary>
            The thread with increased stack size
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ScriptDispatcher._waitHandle">
            <summary>
            Event to signal when the new script task entered to the queue
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ScriptDispatcher._taskQueue">
            <summary>
            Queue of script tasks
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ScriptDispatcher._taskQueueSynchronizer">
            <summary>
            Synchronizer of script task queue
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ScriptDispatcher._disposedFlag">
            <summary>
            Flag that object is destroyed
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ScriptDispatcher.#ctor">
            <summary>
            Constructs an instance of script dispatcher
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ScriptDispatcher.StartThread">
            <summary>
            Starts a thread with increased stack size.
            Loops forever, processing script tasks from the queue.
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ScriptDispatcher.EnqueueTask(MsieJavaScriptEngine.ScriptDispatcher.ScriptTask)">
            <summary>
            Adds a script task to the end of the queue
            </summary>
            <param name="task">Script task</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ScriptDispatcher.InnnerInvoke(System.Func{System.Object})">
            <summary>
            Runs a specified delegate on the thread with increased stack size,
            and returns its result as an <see cref="T:System.Object"/>.
            Blocks until the invocation of delegate is completed.
            </summary>
            <param name="del">Delegate to invocation</param>
            <returns>Result of the delegate invocation</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ScriptDispatcher.Invoke``1(System.Func{``0})">
            <summary>
            Runs a specified delegate on the thread with increased stack size,
            and returns its result as an <typeparamref name="T" />.
            Blocks until the invocation of delegate is completed.
            </summary>
            <typeparam name="T">The type of the return value of the method,
            that specified delegate encapsulates</typeparam>
            <param name="func">Delegate to invocation</param>
            <returns>Result of the delegate invocation</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ScriptDispatcher.Invoke(System.Action)">
            <summary>
            Runs a specified delegate on the thread with increased stack size.
            Blocks until the invocation of delegate is completed.
            </summary>
            <param name="action">Delegate to invocation</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ScriptDispatcher.Dispose">
            <summary>
            Destroys object
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.ScriptDispatcher.ScriptTask">
            <summary>
            Represents a script task, that must be executed on separate thread
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ScriptDispatcher.ScriptTask.Delegate">
            <summary>
            Gets a delegate to invocation
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ScriptDispatcher.ScriptTask.WaitHandle">
            <summary>
            Gets a event to signal when the invocation of delegate has completed
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ScriptDispatcher.ScriptTask.Result">
            <summary>
            Gets or sets a result of the delegate invocation
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ScriptDispatcher.ScriptTask.Exception">
            <summary>
            Gets or sets a exception, that occurred during the invocation of delegate.
            If no exception has occurred, this will be null.
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ScriptDispatcher.ScriptTask.#ctor(System.Func{System.Object},System.Threading.ManualResetEvent)">
            <summary>
            Constructs an instance of script task
            </summary>
            <param name="del">Delegate to invocation</param>
            <param name="waitHandle">Event to signal when the invocation of delegate has completed</param>
        </member>
        <member name="T:MsieJavaScriptEngine.Undefined">
            <summary>
            Represents an JavaScript <code>undefined</code> type
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.Undefined.Value">
            <summary>
            Gets a one and only <code>undefined</code> instance
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.Undefined.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns>A string that represents the current object</returns>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptException._errorCode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptException._errorWCode">
            <summary>
            WCode
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptException._sourceContext">
            <summary>
            Application specific source context
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptException._subcategory">
            <summary>
            Subcategory of error
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptException._lineNumber">
            <summary>
            Line number on which the error occurred
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptException._columnNumber">
            <summary>
            Column number on which the error occurred
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptException._sourceError">
            <summary>
            Content of the line on which the error occurred
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.ErrorCode">
            <summary>
            Gets or sets a error code
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.ErrorWCode">
            <summary>
            Gets or sets a WCode
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.SourceContext">
            <summary>
            Gets or sets a application specific source context
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.Subcategory">
            <summary>
            Gets or sets a subcategory of error
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.LineNumber">
            <summary>
            Gets or sets a line number on which the error occurred
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.ColumnNumber">
            <summary>
            Gets or sets a column number on which the error occurred
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.SourceError">
            <summary>
            Gets or sets a content of the line on which the error occurred
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.ActiveScript.ActiveScriptException"/> class
            with a specified error message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.ActiveScript.ActiveScriptException"/> class
            with a specified error message and a reference to the inner exception
            that is the cause of this exception
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.ActiveScript.ActiveScriptException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization</param>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase">
            <summary>
            Base class of the ActiveScript JavaScript engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.ES5_POLYFILL_RESOURCE_NAME">
            <summary>
            Name of resource, which contains a ECMAScript 5 Polyfill
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.JSON2_LIBRARY_RESOURCE_NAME">
            <summary>
            Name of resource, which contains a JSON2 library
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._pActiveScript">
            <summary>
            Pointer to an instance of native JavaScript engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._pActiveScriptGarbageCollector">
            <summary>
            Pointer to an instance of garbage collector
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._activeScript">
            <summary>
            Instance of native JavaScript engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._activeScriptParse">
            <summary>
            Instance of <see cref="T:MsieJavaScriptEngine.ActiveScript.IActiveScriptParseWrapper"/>
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._activeScriptGarbageCollector">
            <summary>
            Instance of <see cref="T:MsieJavaScriptEngine.ActiveScript.IActiveScriptGarbageCollector"/>
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._dispatch">
            <summary>
            Instance of script dispatch
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._hostItems">
            <summary>
            List of host items
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._documentVersion">
            <summary>
            Host-defined document version string
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._lastException">
            <summary>
            Last ActiveScript exception
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._engineMode">
            <summary>
            JavaScript engine mode
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._engineModeName">
            <summary>
            Name of JavaScript engine mode
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._dispatcher">
            <summary>
            Script dispatcher
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase._disposedFlag">
            <summary>
            Flag that object is destroyed
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.#ctor(System.String,MsieJavaScriptEngine.JsEngineMode,System.String,MsieJavaScriptEngine.ActiveScript.ScriptLanguageVersion,System.Boolean,System.Boolean)">
            <summary>
            Constructs an instance of the ActiveScript JavaScript engine
            </summary>
            <param name="clsid">CLSID of JavaScript engine</param>
            <param name="engineMode">JavaScript engine mode</param>
            <param name="lowerIeVersion">Lowest supported version of Internet Explorer</param>
            <param name="languageVersion">Version of script language</param>
            <param name="useEcmaScript5Polyfill">Flag for whether to use the ECMAScript 5 Polyfill</param>
            <param name="useJson2Library">Flag for whether to use the JSON2 library</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.Finalize">
            <summary>
            Destructs an instance of ActiveScript JavaScript engine
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.IsSupported(System.String,System.Nullable{System.Boolean}@,System.Object@)">
            <summary>
            Checks a support of the JavaScript engine on the machine
            </summary>
            <param name="clsid">CLSID of JavaScript engine</param>
            <param name="isSupported">Flag indicating whether this JavaScript engine is supported</param>
            <param name="supportSynchronizer">Support synchronizer</param>
            <returns>Result of check (true - supports; false - does not support)</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MapToScriptType(System.Object)">
            <summary>
            Makes a mapping of value from the host type to a script type
            </summary>
            <param name="value">The source value</param>
            <returns>The mapped value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MapToScriptType(System.Object[])">
            <summary>
            Makes a mapping of array items from the host type to a script type
            </summary>
            <param name="args">The source array</param>
            <returns>The mapped array</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MapToHostType(System.Object)">
            <summary>
            Makes a mapping of value from the script type to a host type
            </summary>
            <param name="value">The source value</param>
            <returns>The mapped value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MapToHostType(System.Object[])">
            <summary>
            Makes a mapping of array items from the script type to a host type
            </summary>
            <param name="args">The source array</param>
            <returns>The mapped array</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.InitScriptDispatch">
            <summary>
            Initializes a script dispatch
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.GetAndResetLastException">
            <summary>
            Gets and resets a last exception. Returns null for none.
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.InnerExecute(System.String,System.Boolean)">
            <summary>
            Executes a script text
            </summary>
            <param name="code">Script text</param>
            <param name="isExpression">Flag that script text needs to run as an expression</param>
            <returns>Result of the execution</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.InnerCallFunction(System.String,System.Object[])">
            <summary>
            Calls a function
            </summary>
            <param name="functionName">Function name</param>
            <param name="args">Function arguments</param>
            <returns>Result of the function execution</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.InnerGetVariableValue(System.String)">
            <summary>
            Gets a value of variable
            </summary>
            <param name="variableName">Name of variable</param>
            <returns>Value of variable</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.InnerSetVariableValue(System.String,System.Object)">
            <summary>
            Sets a value to variable
            </summary>
            <param name="variableName">Name of variable</param>
            <param name="value">Value of variable</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.InnerCollectGarbage(MsieJavaScriptEngine.ActiveScript.ScriptGCType)">
            <summary>
            Starts a garbage collection
            </summary>
            <param name="type">The type of garbage collection</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.LoadResources(System.Boolean,System.Boolean)">
            <summary>
            Loads a resources
            </summary>
            <param name="useEcmaScript5Polyfill">Flag for whether to use the ECMAScript 5 Polyfill</param>
            <param name="useJson2Library">Flag for whether to use the JSON2 library</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.ExecuteResource(System.String,System.Reflection.Assembly)">
            <summary>
            Executes a code from embedded JS-resource
            </summary>
            <param name="resourceName">The case-sensitive resource name</param>
            <param name="assembly">The assembly, which contains the embedded resource</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MsieJavaScriptEngine#ActiveScript#IActiveScriptSite#GetLcid(System.Int32@)">
            <summary>
            Retrieves the locale identifier associated with the host's user interface. The scripting
            engine uses the identifier to ensure that error strings and other user-interface elements
            generated by the engine appear in the appropriate language.
            </summary>
            <param name="lcid">A variable that receives the locale identifier for user-interface
            elements displayed by the scripting engine</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MsieJavaScriptEngine#ActiveScript#IActiveScriptSite#GetItemInfo(System.String,MsieJavaScriptEngine.ActiveScript.ScriptInfoFlags,System.IntPtr@,System.IntPtr@)">
            <summary>
            Allows the scripting engine to obtain information about an item added with the
            IActiveScript.AddNamedItem method
            </summary>
            <param name="name">The name associated with the item, as specified in the
            IActiveScript.AddNamedItem method</param>
            <param name="mask">A bit mask specifying what information about the item should be
            returned. The scripting engine should request the minimum amount of information possible
            because some of the return parameters (for example, ITypeInfo) can take considerable
            time to load or generate</param>
            <param name="pUnkItem">A variable that receives a pointer to the IUnknown interface associated
            with the given item. The scripting engine can use the IUnknown.QueryInterface method to
            obtain the IDispatch interface for the item. This parameter receives null if mask
            does not include the ScriptInfo.IUnknown value. Also, it receives null if there is no
            object associated with the item name; this mechanism is used to create a simple class when
            the named item was added with the ScriptItem.CodeOnly flag set in the
            IActiveScript.AddNamedItem method.</param>
            <param name="pTypeInfo">A variable that receives a pointer to the ITypeInfo interface
            associated with the item. This parameter receives null if mask does not include the
            ScriptInfo.ITypeInfo value, or if type information is not available for this item. If type
            information is not available, the object cannot source events, and name binding must be
            realized with the IDispatch.GetIDsOfNames method. Note that the ITypeInfo interface
            retrieved describes the item's coclass (TKIND_COCLASS) because the object may support
            multiple interfaces and event interfaces. If the item supports the IProvideMultipleTypeInfo
            interface, the ITypeInfo interface retrieved is the same as the index zero ITypeInfo that
            would be obtained using the IProvideMultipleTypeInfo.GetInfoOfIndex method.</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MsieJavaScriptEngine#ActiveScript#IActiveScriptSite#GetDocVersionString(System.String@)">
            <summary>
            Retrieves a host-defined string that uniquely identifies the current document version. If
            the related document has changed outside the scope of Windows Script (as in the case of an
            HTML page being edited with Notepad), the scripting engine can save this along with its
            persisted state, forcing a recompile the next time the script is loaded.
            </summary>
            <param name="version">The host-defined document version string</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MsieJavaScriptEngine#ActiveScript#IActiveScriptSite#OnScriptTerminate(System.Object,System.Runtime.InteropServices.ComTypes.EXCEPINFO)">
            <summary>
            Informs the host that the script has completed execution
            </summary>
            <param name="result">A variable that contains the script result, or null if the script
            produced no result</param>
            <param name="exceptionInfo">Contains exception information generated when the script
            terminated, or null if no exception was generated</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MsieJavaScriptEngine#ActiveScript#IActiveScriptSite#OnStateChange(MsieJavaScriptEngine.ActiveScript.ScriptState)">
            <summary>
            Informs the host that the scripting engine has changed states
            </summary>
            <param name="scriptState">Indicates the new script state</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MsieJavaScriptEngine#ActiveScript#IActiveScriptSite#OnScriptError(MsieJavaScriptEngine.ActiveScript.IActiveScriptError)">
            <summary>
            Informs the host that an execution error occurred while the engine was running the script.
            </summary>
            <param name="scriptError">A host can use this interface to obtain information about the
            execution error</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MsieJavaScriptEngine#ActiveScript#IActiveScriptSite#OnEnterScript">
            <summary>
            Informs the host that the scripting engine has begun executing the script code
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.MsieJavaScriptEngine#ActiveScript#IActiveScriptSite#OnLeaveScript">
            <summary>
            Informs the host that the scripting engine has returned from executing script code
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.Dispose">
            <summary>
            Destroys object
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptJsEngineBase.Dispose(System.Boolean)">
            <summary>
            Destroys object
            </summary>
            <param name="disposing">Flag, allowing destruction of
            managed objects contained in fields of class</param>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper._is64Bit">
            <summary>
            Flag that the current process is a 64-bit process
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper._pActiveScriptParse32">
            <summary>
            Pointer to an instance of 32-bit ActiveScript parser
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper._activeScriptParse32">
            <summary>
            Instance of 32-bit ActiveScript parser
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper._pActiveScriptParse64">
            <summary>
            Pointer to an instance of 64-bit ActiveScript parser
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper._activeScriptParse64">
            <summary>
            Instance of 64-bit ActiveScript parser
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper._lastException">
            <summary>
            Last COM exception
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper._disposedFlag">
            <summary>
            Flag that object is destroyed
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper.LastException">
            <summary>
            Gets a last COM exception
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper.#ctor(System.IntPtr,MsieJavaScriptEngine.ActiveScript.IActiveScript)">
            <summary>
            Constructs instance of the <see cref="T:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper"/> class
            </summary>
            <param name="pActiveScript">Pointer to an instance of native JavaScript engine</param>
            <param name="activeScript">Instance of native JavaScript engine.
            Must implement IActiveScriptParse32 or IActiveScriptParse64.</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper.Finalize">
            <summary>
            Destructs instance of <see cref="T:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper"/>
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper.Dispose(System.Boolean)">
            <summary>
            Destroys object
            </summary>
            <param name="disposing">Flag, allowing destruction of
            managed objects contained in fields of class</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper.InitNew">
            <summary>
            Initializes the scripting engine
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper.AddScriptlet(System.String,System.String,System.String,System.String,System.String,System.String,System.IntPtr,System.UInt32,MsieJavaScriptEngine.ActiveScript.ScriptTextFlags)">
            <summary>
            Adds a code scriptlet to the script. This method is used in environments where the
            persistent state of the script is intertwined with the host document and the host
            is responsible for restoring the script, rather than through an IPersist* interface.
            The primary examples are HTML scripting languages that allow scriptlets of code
            embedded in the HTML document to be attached to intrinsic events (for instance,
            ONCLICK="button1.text='Exit'").
            </summary>
            <param name="defaultName">The default name to associate with the scriptlet. If the
            scriptlet does not contain naming information (as in the ONCLICK example above),
            this name will be used to identify the scriptlet. If this parameter is NULL, the
            scripting engine manufactures a unique name, if necessary.</param>
            <param name="code">The scriptlet text to add. The interpretation of this string
            depends on the scripting language.</param>
            <param name="itemName">The item name associated with this scriptlet. This parameter,
            in addition to pstrSubItemName, identifies the object for which the scriptlet is
            an event handler.</param>
            <param name="subItemName">The name of a subobject of the named item with which this
            scriptlet is associated; this name must be found in the named item's type
            information. This parameter is NULL if the scriptlet is to be associated with the
            named item instead of a subitem. This parameter, in addition to pstrItemName,
            identifies the specific object for which the scriptlet is an event handler.</param>
            <param name="eventName">The name of the event for which the scriptlet is an event
            handler.</param>
            <param name="delimiter">The end-of-scriptlet delimiter. When the pstrCode parameter
            is parsed from a stream of text, the host typically uses a delimiter, such as two
            single quotation marks (''), to detect the end of the scriptlet. This parameter
            specifies the delimiter that the host used, allowing the scripting engine to
            provide some conditional primitive preprocessing (for example, replacing a single
            quotation mark ['] with two single quotation marks for use as a delimiter).
            Exactly how (and if) the scripting engine makes use of this information depends
            on the scripting engine. Set this parameter to NULL if the host did not use a
            delimiter to mark the end of the scriptlet.</param>
            <param name="sourceContextCookie">Application-defined value that is used for
            debugging purposes</param>
            <param name="startingLineNumber">Zero-based value that specifies which line the
            parsing will begin at</param>
            <param name="flags">Flags associated with the scriptlet</param>
            <returns>
            Actual name used to identify the scriptlet. This is to be in
            order of preference: a name explicitly specified in the scriptlet text, the
            default name provided in pstrDefaultName, or a unique name synthesized by the
            scripting engine.
            </returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper.ParseScriptText(System.String,System.String,System.Object,System.String,System.IntPtr,System.UInt32,MsieJavaScriptEngine.ActiveScript.ScriptTextFlags)">
            <summary>
            Parses the given code scriptlet, adding declarations into the namespace and
            evaluating code as appropriate.
            </summary>
            <param name="code">The scriptlet text to evaluate. The interpretation of this
            string depends on the scripting language</param>
            <param name="itemName">The item name that gives the context in which the
            scriptlet is to be evaluated. If this parameter is NULL, the code is evaluated
            in the scripting engine's global context</param>
            <param name="context">The context object. This object is reserved for use in a
            debugging environment, where such a context may be provided by the debugger to
            represent an active run-time context. If this parameter is NULL, the engine
            uses pstrItemName to identify the context.</param>
            <param name="delimiter">The end-of-scriptlet delimiter. When pstrCode is parsed
            from a stream of text, the host typically uses a delimiter, such as two single
            quotation marks (''), to detect the end of the scriptlet. This parameter specifies
            the delimiter that the host used, allowing the scripting engine to provide some
            conditional primitive preprocessing (for example, replacing a single quotation
            mark ['] with two single quotation marks for use as a delimiter). Exactly how
            (and if) the scripting engine makes use of this information depends on the
            scripting engine. Set this parameter to NULL if the host did not use a delimiter
            to mark the end of the scriptlet.</param>
            <param name="sourceContextCookie">Application-defined value that is used for
            debugging purposes</param>
            <param name="startingLineNumber">Zero-based value that specifies which line the
            parsing will begin at</param>
            <param name="flags">Flags associated with the scriptlet</param>
            <returns>
            The results of scriptlet processing, or NULL if the caller
            expects no result (that is, the SCRIPTTEXT_ISEXPRESSION value is not set).
            </returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ActiveScriptParseWrapper.Dispose">
            <summary>
            Destroys object
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.ChakraActiveScriptJsEngine">
            <summary>
            ActiveScript version of Chakra JavaScript engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ChakraActiveScriptJsEngine._isSupported">
            <summary>
            Flag indicating whether this JavaScript engine is supported
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ChakraActiveScriptJsEngine._supportSynchronizer">
            <summary>
            Support synchronizer
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ChakraActiveScriptJsEngine.#ctor">
            <summary>
            Constructs instance of the Chakra ActiveScript JavaScript engine
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ChakraActiveScriptJsEngine.IsSupported">
            <summary>
            Checks a support of the Chakra ActiveScript JavaScript engine on the machine
            </summary>
            <returns>Result of check (true - supports; false - does not support)</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.ClassicActiveScriptJsEngine">
            <summary>
            Classic MSIE JavaScript engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ClassicActiveScriptJsEngine._isSupported">
            <summary>
            Flag indicating whether this JavaScript engine is supported
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ClassicActiveScriptJsEngine._supportSynchronizer">
            <summary>
            Support synchronizer
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ClassicActiveScriptJsEngine.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructs instance of the Classic MSIE JavaScript engine
            </summary>
            <param name="useEcmaScript5Polyfill">Flag for whether to use the ECMAScript 5 Polyfill</param>
            <param name="useJson2Library">Flag for whether to use the JSON2 library</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.ClassicActiveScriptJsEngine.IsSupported">
            <summary>
            Checks a support of the Classic MSIE JavaScript engine on the machine
            </summary>
            <returns>Result of check (true - supports; false - does not support)</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.IActiveScript">
            <summary>
            Provides the methods necessary to initialize the scripting engine. The scripting engine must
            implement the IActiveScript interface
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.SetScriptSite(MsieJavaScriptEngine.ActiveScript.IActiveScriptSite)">
            <summary>
            Informs the scripting engine of the IActiveScriptSite interface site provided by the host.
            Call this method before any other IActiveScript interface methods is used
            </summary>
            <param name="site">The host-supplied script site to be associated with this instance
            of the scripting engine. The site must be uniquely assigned to this scripting engine
            instance; it cannot be shared with other scripting engines.</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.GetScriptSite(System.Guid,MsieJavaScriptEngine.ActiveScript.IActiveScriptSite@)">
            <summary>
            Retrieves the site object associated with the Windows Script engine
            </summary>
            <param name="iid">Identifier of the requested interface</param>
            <param name="site">The host's site object</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.SetScriptState(MsieJavaScriptEngine.ActiveScript.ScriptState)">
            <summary>
            Puts the scripting engine into the given state. This method can be called from non-base
            threads without resulting in a non-base callout to host objects or to the IActiveScriptSite
            interface.
            </summary>
            <param name="state">Sets the scripting engine to the given state</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.GetScriptState(MsieJavaScriptEngine.ActiveScript.ScriptState@)">
            <summary>
            Retrieves the current state of the scripting engine. This method can be called from
            non-base threads without resulting in a non-base callout to host objects or to the
            IActiveScriptSite interface.
            </summary>
            <param name="state">The value indicates the current state of the scripting engine
            associated with the calling thread</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.Close">
            <summary>
            Causes the scripting engine to abandon any currently loaded script, lose its state, and
            release any interface pointers it has to other objects, thus entering a closed state.
            Event sinks, immediately executed script text, and macro invocations that are already in
            progress are completed before the state changes (use IActiveScript::InterruptScriptThread to
            cancel a running script thread). This method must be called by the creating host before the
            interface is released to prevent circular reference problems.
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.AddNamedItem(System.String,MsieJavaScriptEngine.ActiveScript.ScriptItemFlags)">
            <summary>
            Adds the name of a root-level item to the scripting engine's name space. A root-level item
            is an object with properties and methods, an event source, or all three
            </summary>
            <param name="name">The name of the item as viewed from the script. The name must be unique
            and persistable</param>
            <param name="flags">Flags associated with an item</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.AddTypeLib(System.Guid,System.UInt32,System.UInt32,MsieJavaScriptEngine.ActiveScript.ScriptTypeLibFlags)">
            <summary>
            Adds a type library to the name space for the script. This is similar to the #include
            directive in C/C++. It allows a set of predefined items such as class definitions, typedefs,
            and named constants to be added to the run-time environment available to the script.
            </summary>
            <param name="clsId">CLSID of the type library to add</param>
            <param name="majorVersion">Major version number</param>
            <param name="minorVersion">Minor version number</param>
            <param name="typeLibFlags">Option flags</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.GetScriptDispatch(System.String,System.Object@)">
            <summary>
            Retrieves the IDispatch interface for the methods and properties associated with the
            currently running script
            </summary>
            <param name="itemName">The name of the item for which the caller needs the associated
            dispatch object. If this parameter is NULL, the dispatch object contains as its members
            all of the global methods and properties defined by the script. Through the IDispatch
            interface and the associated ITypeInfo interface, the host can invoke script methods
            or view and modify script variables.</param>
            <param name="dispatch">The object associated with the script's global methods and
            properties. If the scripting engine does not support such an object, NULL is returned.</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.GetCurrentScriptThreadId(System.UInt32@)">
            <summary>
            Retrieves a scripting-engine-defined identifier for the currently executing thread.
            The identifier can be used in subsequent calls to script thread execution-control
            methods such as the IActiveScript.InterruptScriptThread method.
            </summary>
            <param name="threadId">The script thread identifier associated with the current thread.
            The interpretation of this identifier is left to the scripting engine, but it can be
            just a copy of the Windows thread identifier. If the Win32 thread terminates, this
            identifier becomes unassigned and can subsequently be assigned to another thread.</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.GetScriptThreadId(System.UInt32,System.UInt32@)">
            <summary>
            Retrieves a scripting-engine-defined identifier for the thread associated with the
            given Win32 thread
            </summary>
            <param name="win32ThreadId">Thread identifier of a running Win32 thread in the
            current process. Use the IActiveScript::GetCurrentScriptThreadID function to
            retrieve the thread identifier of the currently executing thread</param>
            <param name="scriptThreadId">The script thread identifier associated with the given
            Win32 thread. The interpretation of this identifier is left to the scripting engine,
            but it can be just a copy of the Windows thread identifier. Note that if the Win32
            thread terminates, this identifier becomes unassigned and may subsequently be
            assigned to another thread.</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.GetScriptThreadState(System.UInt32,MsieJavaScriptEngine.ActiveScript.ScriptThreadState@)">
            <summary>
            Retrieves the current state of a script thread
            </summary>
            <param name="scriptThreadId">Identifier of the thread for which the state is desired</param>
            <param name="threadState">Thread state</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.InterruptScriptThread(System.UInt32,System.Runtime.InteropServices.ComTypes.EXCEPINFO,MsieJavaScriptEngine.ActiveScript.ScriptInterruptFlags)">
            <summary>
            Interrupts the execution of a running script thread (an event sink, an immediate
            execution, or a macro invocation). This method can be used to terminate a script that
            is stuck (for example, in an infinite loop). It can be called from non-base threads
            without resulting in a non-base callout to host objects or to the IActiveScriptSite method.
            </summary>
            <param name="scriptThreadId">Identifier of the thread to interrupt, or one of the
            special thread identifier values</param>
            <param name="exceptionInfo">The error information that should be reported to the aborted script.</param>
            <param name="flags">Option flags associated with the interruption</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScript.Clone(MsieJavaScriptEngine.ActiveScript.IActiveScript@)">
            <summary>
            Clones the current scripting engine (minus any current execution state), returning
            a loaded scripting engine that has no site in the current thread. The properties of
            this new scripting engine will be identical to the properties the original scripting
            engine would be in if it were transitioned back to the initialized state.
            </summary>
            <param name="script">The cloned scripting engine. The host must create a site and
            call the IActiveScript.SetScriptSite method on the new scripting engine before it
            will be in the initialized state and, therefore, usable.</param>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.IActiveScriptError">
            <summary>
            An object implementing this interface is passed to the IActiveScriptSite.OnScriptError method
            whenever the scripting engine encounters an unhandled error. The host then calls methods on
            this object to obtain information about the error that occurred.
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptError.GetExceptionInfo(System.Runtime.InteropServices.ComTypes.EXCEPINFO@)">
            <summary>
            Retrieves information about an error that occurred while the scripting engine was running
            a script
            </summary>
            <param name="exceptionInfo">An EXCEPINFO structure that receives error information</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptError.GetSourcePosition(System.UInt32@,System.UInt32@,System.Int32@)">
            <summary>
            Retrieves the location in the source code where an error occurred while the scripting engine
            was running a script.
            </summary>
            <param name="sourceContext">A cookie that identifies the context. The interpretation of
            this parameter depends on the host application.</param>
            <param name="lineNumber">The line number in the source file where the error occurred</param>
            <param name="characterPosition">The character position in the line where the error occurred</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptError.GetSourceLineText(System.String@)">
            <summary>
            Retrieves the line in the source file where an error occurred while a scripting engine
            was running a script
            </summary>
            <param name="sourceLine">The line of source code in which the error occurred</param>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.IActiveScriptGarbageCollector">
            <summary>
            Provides a method to start garbage collection.
            This interface should be implemented by Active Script engines that want to clean up their resources.
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptGarbageCollector.CollectGarbage(MsieJavaScriptEngine.ActiveScript.ScriptGCType)">
            <summary>
            Starts a garbage collection
            </summary>
            <param name="type">The type of garbage collection</param>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.IActiveScriptParse32">
            <summary>
            If the Windows Script engine allows raw text code scriptlets to be added to the script
            or allows expression text to be evaluated at run time, it implements the
            IActiveScriptParse interface. For interpreted scripting languages that have no
            independent authoring environment, such as VBScript, this provides an alternate
            mechanism (other than IPersist*) to get script code into the scripting engine, and
            to attach script fragments to various object events.
            </summary>
            <remarks>
            Before the scripting engine can be used, one of the following methods must be called
            : IPersist*::Load, IPersist*::InitNew, or IActiveScriptParse::InitNew. The semantics
            of this method are identical to IPersistStreamInit::InitNew, in that this method tells
            the scripting engine to initialize itself. Note that it is not valid to call both
            IPersist*::InitNew or IActiveScriptParse::InitNew and IPersist*::Load, nor is it valid
            to call IPersist*::InitNew, IActiveScriptParse::InitNew, or IPersist*::Load more
            than once.
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptParse32.InitNew">
            <summary>
            Initializes the scripting engine
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptParse32.AddScriptlet(System.String,System.String,System.String,System.String,System.String,System.String,System.IntPtr,System.UInt32,MsieJavaScriptEngine.ActiveScript.ScriptTextFlags,System.String@,System.Runtime.InteropServices.ComTypes.EXCEPINFO@)">
            <summary>
            Adds a code scriptlet to the script. This method is used in environments where the
            persistent state of the script is intertwined with the host document and the host
            is responsible for restoring the script, rather than through an IPersist* interface.
            The primary examples are HTML scripting languages that allow scriptlets of code
            embedded in the HTML document to be attached to intrinsic events (for instance,
            ONCLICK="button1.text='Exit'").
            </summary>
            <param name="defaultName">The default name to associate with the scriptlet. If the
            scriptlet does not contain naming information (as in the ONCLICK example above),
            this name will be used to identify the scriptlet. If this parameter is NULL, the
            scripting engine manufactures a unique name, if necessary.</param>
            <param name="code">The scriptlet text to add. The interpretation of this string
            depends on the scripting language.</param>
            <param name="itemName">The item name associated with this scriptlet. This parameter,
            in addition to pstrSubItemName, identifies the object for which the scriptlet is
            an event handler.</param>
            <param name="subItemName">The name of a subobject of the named item with which this
            scriptlet is associated; this name must be found in the named item's type
            information. This parameter is NULL if the scriptlet is to be associated with the
            named item instead of a subitem. This parameter, in addition to pstrItemName,
            identifies the specific object for which the scriptlet is an event handler.</param>
            <param name="eventName">The name of the event for which the scriptlet is an event
            handler</param>
            <param name="delimiter">The end-of-scriptlet delimiter. When the pstrCode parameter
            is parsed from a stream of text, the host typically uses a delimiter, such as two
            single quotation marks (''), to detect the end of the scriptlet. This parameter
            specifies the delimiter that the host used, allowing the scripting engine to
            provide some conditional primitive preprocessing (for example, replacing a single
            quotation mark ['] with two single quotation marks for use as a delimiter).
            Exactly how (and if) the scripting engine makes use of this information depends
            on the scripting engine. Set this parameter to NULL if the host did not use a
            delimiter to mark the end of the scriptlet.</param>
            <param name="pSourceContextCookie">Application-defined value that is used for
            debugging purposes</param>
            <param name="startingLineNumber">Zero-based value that specifies which line the
            parsing will begin at</param>
            <param name="flags">Flags associated with the scriptlet</param>
            <param name="name">Actual name used to identify the scriptlet. This is to be in
            order of preference: a name explicitly specified in the scriptlet text, the
            default name provided in pstrDefaultName, or a unique name synthesized by the
            scripting engine.</param>
            <param name="exceptionInfo">Exception information. This structure should be
            filled in if DISP_E_EXCEPTION is returned</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptParse32.ParseScriptText(System.String,System.String,System.Object,System.String,System.IntPtr,System.UInt32,MsieJavaScriptEngine.ActiveScript.ScriptTextFlags,System.Object@,System.Runtime.InteropServices.ComTypes.EXCEPINFO@)">
            <summary>
            Parses the given code scriptlet, adding declarations into the namespace and
            evaluating code as appropriate
            </summary>
            <param name="code">The scriptlet text to evaluate. The interpretation of this
            string depends on the scripting language</param>
            <param name="itemName">The item name that gives the context in which the
            scriptlet is to be evaluated. If this parameter is NULL, the code is evaluated
            in the scripting engine's global context</param>
            <param name="context">The context object. This object is reserved for use in a
            debugging environment, where such a context may be provided by the debugger to
            represent an active run-time context. If this parameter is NULL, the engine
            uses pstrItemName to identify the context.</param>
            <param name="delimiter">The end-of-scriptlet delimiter. When pstrCode is parsed
            from a stream of text, the host typically uses a delimiter, such as two single
            quotation marks (''), to detect the end of the scriptlet. This parameter specifies
            the delimiter that the host used, allowing the scripting engine to provide some
            conditional primitive preprocessing (for example, replacing a single quotation
            mark ['] with two single quotation marks for use as a delimiter). Exactly how
            (and if) the scripting engine makes use of this information depends on the
            scripting engine. Set this parameter to NULL if the host did not use a delimiter
            to mark the end of the scriptlet.</param>
            <param name="pSourceContextCookie">Application-defined value that is used for
            debugging purposes</param>
            <param name="startingLineNumber">Zero-based value that specifies which line the
            parsing will begin at</param>
            <param name="flags">Flags associated with the scriptlet</param>
            <param name="result">The results of scriptlet processing, or NULL if the caller
            expects no result (that is, the SCRIPTTEXT_ISEXPRESSION value is not set)</param>
            <param name="exceptionInfo">The exception information. This structure is filled
            if IActiveScriptParse::ParseScriptText returns DISP_E_EXCEPTION.</param>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.IActiveScriptParse64">
            <summary>
            If the Windows Script engine allows raw text code scriptlets to be added to the script
            or allows expression text to be evaluated at run time, it implements the
            IActiveScriptParse interface. For interpreted scripting languages that have no
            independent authoring environment, such as VBScript, this provides an alternate
            mechanism (other than IPersist*) to get script code into the scripting engine, and
            to attach script fragments to various object events.
            </summary>
            <remarks>
            Before the scripting engine can be used, one of the following methods must be called
            : IPersist*::Load, IPersist*::InitNew, or IActiveScriptParse::InitNew. The semantics
            of this method are identical to IPersistStreamInit::InitNew, in that this method tells
            the scripting engine to initialize itself. Note that it is not valid to call both
            IPersist*::InitNew or IActiveScriptParse::InitNew and IPersist*::Load, nor is it valid
            to call IPersist*::InitNew, IActiveScriptParse::InitNew, or IPersist*::Load more
            than once.
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptParse64.InitNew">
            <summary>
            Initializes the scripting engine
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptParse64.AddScriptlet(System.String,System.String,System.String,System.String,System.String,System.String,System.IntPtr,System.UInt32,MsieJavaScriptEngine.ActiveScript.ScriptTextFlags,System.String@,System.Runtime.InteropServices.ComTypes.EXCEPINFO@)">
            <summary>
            Adds a code scriptlet to the script. This method is used in environments where the
            persistent state of the script is intertwined with the host document and the host
            is responsible for restoring the script, rather than through an IPersist* interface.
            The primary examples are HTML scripting languages that allow scriptlets of code
            embedded in the HTML document to be attached to intrinsic events (for instance,
            ONCLICK="button1.text='Exit'").
            </summary>
            <param name="defaultName">The default name to associate with the scriptlet. If the
            scriptlet does not contain naming information (as in the ONCLICK example above),
            this name will be used to identify the scriptlet. If this parameter is NULL, the
            scripting engine manufactures a unique name, if necessary.</param>
            <param name="code">The scriptlet text to add. The interpretation of this string
            depends on the scripting language.</param>
            <param name="itemName">The item name associated with this scriptlet. This parameter,
            in addition to pstrSubItemName, identifies the object for which the scriptlet is
            an event handler.</param>
            <param name="subItemName">The name of a subobject of the named item with which this
            scriptlet is associated; this name must be found in the named item's type
            information. This parameter is NULL if the scriptlet is to be associated with the
            named item instead of a subitem. This parameter, in addition to pstrItemName,
            identifies the specific object for which the scriptlet is an event handler.</param>
            <param name="eventName">The name of the event for which the scriptlet is an event
            handler</param>
            <param name="delimiter">The end-of-scriptlet delimiter. When the pstrCode parameter
            is parsed from a stream of text, the host typically uses a delimiter, such as two
            single quotation marks (''), to detect the end of the scriptlet. This parameter
            specifies the delimiter that the host used, allowing the scripting engine to
            provide some conditional primitive preprocessing (for example, replacing a single
            quotation mark ['] with two single quotation marks for use as a delimiter).
            Exactly how (and if) the scripting engine makes use of this information depends
            on the scripting engine. Set this parameter to NULL if the host did not use a
            delimiter to mark the end of the scriptlet.</param>
            <param name="pSourceContextCookie">Application-defined value that is used for
            debugging purposes</param>
            <param name="startingLineNumber">Zero-based value that specifies which line the
            parsing will begin at</param>
            <param name="flags">Flags associated with the scriptlet</param>
            <param name="name">Actual name used to identify the scriptlet. This is to be in
            order of preference: a name explicitly specified in the scriptlet text, the
            default name provided in pstrDefaultName, or a unique name synthesized by the
            scripting engine.</param>
            <param name="exceptionInfo">Exception information. This structure should be
            filled in if DISP_E_EXCEPTION is returned</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptParse64.ParseScriptText(System.String,System.String,System.Object,System.String,System.IntPtr,System.UInt32,MsieJavaScriptEngine.ActiveScript.ScriptTextFlags,System.Object@,System.Runtime.InteropServices.ComTypes.EXCEPINFO@)">
            <summary>
            Parses the given code scriptlet, adding declarations into the namespace and
            evaluating code as appropriate
            </summary>
            <param name="code">The scriptlet text to evaluate. The interpretation of this
            string depends on the scripting language</param>
            <param name="itemName">The item name that gives the context in which the
            scriptlet is to be evaluated. If this parameter is NULL, the code is evaluated
            in the scripting engine's global context</param>
            <param name="context">The context object. This object is reserved for use in a
            debugging environment, where such a context may be provided by the debugger to
            represent an active run-time context. If this parameter is NULL, the engine
            uses pstrItemName to identify the context.</param>
            <param name="delimiter">The end-of-scriptlet delimiter. When pstrCode is parsed
            from a stream of text, the host typically uses a delimiter, such as two single
            quotation marks (''), to detect the end of the scriptlet. This parameter specifies
            the delimiter that the host used, allowing the scripting engine to provide some
            conditional primitive preprocessing (for example, replacing a single quotation
            mark ['] with two single quotation marks for use as a delimiter). Exactly how
            (and if) the scripting engine makes use of this information depends on the
            scripting engine. Set this parameter to NULL if the host did not use a delimiter
            to mark the end of the scriptlet.</param>
            <param name="pSourceContextCookie">Application-defined value that is used for
            debugging purposes</param>
            <param name="startingLineNumber">Zero-based value that specifies which line the
            parsing will begin at</param>
            <param name="flags">Flags associated with the scriptlet</param>
            <param name="result">The results of scriptlet processing, or NULL if the caller
            expects no result (that is, the SCRIPTTEXT_ISEXPRESSION value is not set)</param>
            <param name="exceptionInfo">The exception information. This structure is filled
            if IActiveScriptParse::ParseScriptText returns DISP_E_EXCEPTION.</param>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.IActiveScriptParseWrapper">
            <summary>
            If the Windows Script engine allows raw text code scriptlets to be added to the script
            or allows expression text to be evaluated at run time, it implements the
            IActiveScriptParse interface. For interpreted scripting languages that have no
            independent authoring environment, such as VBScript, this provides an alternate
            mechanism (other than IPersist*) to get script code into the scripting engine, and
            to attach script fragments to various object events.
            </summary>
            <remarks>
            Before the scripting engine can be used, one of the following methods must be called
            : IPersist*::Load, IPersist*::InitNew, or IActiveScriptParse::InitNew. The semantics
            of this method are identical to IPersistStreamInit::InitNew, in that this method tells
            the scripting engine to initialize itself. Note that it is not valid to call both
            IPersist*::InitNew or IActiveScriptParse::InitNew and IPersist*::Load, nor is it valid
            to call IPersist*::InitNew, IActiveScriptParse::InitNew, or IPersist*::Load more
            than once.
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptParseWrapper.InitNew">
            <summary>
            Initializes the scripting engine.
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptParseWrapper.AddScriptlet(System.String,System.String,System.String,System.String,System.String,System.String,System.IntPtr,System.UInt32,MsieJavaScriptEngine.ActiveScript.ScriptTextFlags)">
            <summary>
            Adds a code scriptlet to the script. This method is used in environments where the
            persistent state of the script is intertwined with the host document and the host
            is responsible for restoring the script, rather than through an IPersist* interface.
            The primary examples are HTML scripting languages that allow scriptlets of code
            embedded in the HTML document to be attached to intrinsic events (for instance,
            ONCLICK="button1.text='Exit'").
            </summary>
            <param name="defaultName">The default name to associate with the scriptlet. If the
            scriptlet does not contain naming information (as in the ONCLICK example above),
            this name will be used to identify the scriptlet. If this parameter is NULL, the
            scripting engine manufactures a unique name, if necessary.</param>
            <param name="code">The scriptlet text to add. The interpretation of this string
            depends on the scripting language</param>
            <param name="itemName">The item name associated with this scriptlet. This parameter,
            in addition to pstrSubItemName, identifies the object for which the scriptlet is
            an event handler</param>
            <param name="subItemName">The name of a subobject of the named item with which this
            scriptlet is associated; this name must be found in the named item's type
            information. This parameter is NULL if the scriptlet is to be associated with the
            named item instead of a subitem. This parameter, in addition to pstrItemName,
            identifies the specific object for which the scriptlet is an event handler.</param>
            <param name="eventName">The name of the event for which the scriptlet is an event
            handler</param>
            <param name="delimiter">The end-of-scriptlet delimiter. When the pstrCode parameter
            is parsed from a stream of text, the host typically uses a delimiter, such as two
            single quotation marks (''), to detect the end of the scriptlet. This parameter
            specifies the delimiter that the host used, allowing the scripting engine to
            provide some conditional primitive preprocessing (for example, replacing a single
            quotation mark ['] with two single quotation marks for use as a delimiter).
            Exactly how (and if) the scripting engine makes use of this information depends
            on the scripting engine. Set this parameter to NULL if the host did not use a
            delimiter to mark the end of the scriptlet.</param>
            <param name="sourceContextCookie">Application-defined value that is used for
            debugging purposes</param>
            <param name="startingLineNumber">Zero-based value that specifies which line the
            parsing will begin at</param>
            <param name="flags">Flags associated with the scriptlet.</param>
            <returns>Actual name used to identify the scriptlet. This is to be in
            order of preference: a name explicitly specified in the scriptlet text, the
            default name provided in pstrDefaultName, or a unique name synthesized by the
            scripting engine</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptParseWrapper.ParseScriptText(System.String,System.String,System.Object,System.String,System.IntPtr,System.UInt32,MsieJavaScriptEngine.ActiveScript.ScriptTextFlags)">
            <summary>
            Parses the given code scriptlet, adding declarations into the namespace and
            evaluating code as appropriate
            </summary>
            <param name="code">The scriptlet text to evaluate. The interpretation of this
            string depends on the scripting language</param>
            <param name="itemName">The item name that gives the context in which the
            scriptlet is to be evaluated. If this parameter is NULL, the code is evaluated
            in the scripting engine's global context.</param>
            <param name="context">The context object. This object is reserved for use in a
            debugging environment, where such a context may be provided by the debugger to
            represent an active run-time context. If this parameter is NULL, the engine
            uses pstrItemName to identify the context</param>
            <param name="delimiter">The end-of-scriptlet delimiter. When pstrCode is parsed
            from a stream of text, the host typically uses a delimiter, such as two single
            quotation marks (''), to detect the end of the scriptlet. This parameter specifies
            the delimiter that the host used, allowing the scripting engine to provide some
            conditional primitive preprocessing (for example, replacing a single quotation
            mark ['] with two single quotation marks for use as a delimiter). Exactly how
            (and if) the scripting engine makes use of this information depends on the
            scripting engine. Set this parameter to NULL if the host did not use a delimiter
            to mark the end of the scriptlet.</param>
            <param name="sourceContextCookie">Application-defined value that is used for
            debugging purposes</param>
            <param name="startingLineNumber">Zero-based value that specifies which line the
            parsing will begin at</param>
            <param name="flags">Flags associated with the scriptlet</param>
            <returns>The results of scriptlet processing, or NULL if the caller
            expects no result (that is, the SCRIPTTEXT_ISEXPRESSION value is not set)</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.IActiveScriptSite">
            <summary>
            Implemented by the host to create a site for the Windows Script engine. Usually, this site
            will be associated with the container of all the objects that are visible to the script
            (for example, the ActiveX Controls). Typically, this container will correspond to the document
            or page being viewed. Microsoft Internet Explorer, for example, would create such a container
            for each HTML page being displayed. Each ActiveX control (or other automation object) on the
            page, and the scripting engine itself, would be enumerable within this container.
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptSite.GetLcid(System.Int32@)">
            <summary>
            Retrieves the locale identifier associated with the host's user interface. The scripting
            engine uses the identifier to ensure that error strings and other user-interface elements
            generated by the engine appear in the appropriate language.
            </summary>
            <param name="lcid">A variable that receives the locale identifier for user-interface
            elements displayed by the scripting engine</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptSite.GetItemInfo(System.String,MsieJavaScriptEngine.ActiveScript.ScriptInfoFlags,System.IntPtr@,System.IntPtr@)">
            <summary>
            Allows the scripting engine to obtain information about an item added with the
            IActiveScript.AddNamedItem method
            </summary>
            <param name="name">The name associated with the item, as specified in the
            IActiveScript.AddNamedItem method</param>
            <param name="mask">A bit mask specifying what information about the item should be
            returned. The scripting engine should request the minimum amount of information possible
            because some of the return parameters (for example, ITypeInfo) can take considerable
            time to load or generate.</param>
            <param name="pUnkItem">A variable that receives a pointer to the IUnknown interface associated
            with the given item. The scripting engine can use the IUnknown.QueryInterface method to
            obtain the IDispatch interface for the item. This parameter receives null if mask
            does not include the ScriptInfo.IUnknown value. Also, it receives null if there is no
            object associated with the item name; this mechanism is used to create a simple class when
            the named item was added with the ScriptItem.CodeOnly flag set in the
            IActiveScript.AddNamedItem method.</param>
            <param name="pTypeInfo">A variable that receives a pointer to the ITypeInfo interface
            associated with the item. This parameter receives null if mask does not include the
            ScriptInfo.ITypeInfo value, or if type information is not available for this item. If type
            information is not available, the object cannot source events, and name binding must be
            realized with the IDispatch.GetIDsOfNames method. Note that the ITypeInfo interface
            retrieved describes the item's coclass (TKIND_COCLASS) because the object may support
            multiple interfaces and event interfaces. If the item supports the IProvideMultipleTypeInfo
            interface, the ITypeInfo interface retrieved is the same as the index zero ITypeInfo that
            would be obtained using the IProvideMultipleTypeInfo.GetInfoOfIndex method.</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptSite.GetDocVersionString(System.String@)">
            <summary>
            Retrieves a host-defined string that uniquely identifies the current document version. If
            the related document has changed outside the scope of Windows Script (as in the case of an
            HTML page being edited with Notepad), the scripting engine can save this along with its
            persisted state, forcing a recompile the next time the script is loaded.
            </summary>
            <param name="version">The host-defined document version string</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptSite.OnScriptTerminate(System.Object,System.Runtime.InteropServices.ComTypes.EXCEPINFO)">
            <summary>
            Informs the host that the script has completed execution.
            </summary>
            <param name="result">A variable that contains the script result, or null if the script
            produced no result.</param>
            <param name="exceptionInfo">Contains exception information generated when the script
            terminated, or null if no exception was generated</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptSite.OnStateChange(MsieJavaScriptEngine.ActiveScript.ScriptState)">
            <summary>
            Informs the host that the scripting engine has changed states.
            </summary>
            <param name="state">Indicates the new script state.</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptSite.OnScriptError(MsieJavaScriptEngine.ActiveScript.IActiveScriptError)">
            <summary>
            Informs the host that an execution error occurred while the engine was running the script.
            </summary>
            <param name="error">A host can use this interface to obtain information about the
            execution error.</param>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptSite.OnEnterScript">
            <summary>
            Informs the host that the scripting engine has begun executing the script code.
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.ActiveScript.IActiveScriptSite.OnLeaveScript">
            <summary>
            Informs the host that the scripting engine has returned from executing script code.
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.ScriptGCType">
            <summary>
            The type of garbage collection
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptGCType.Normal">
            <summary>
            Do normal garbage collection
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptGCType.Exhaustive">
            <summary>
            Do exhaustive garbage collection
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.ScriptHResult">
            <summary>
            Common HRESULT Values
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptHResult.Ok">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptHResult.InvalidArg">
            <summary>
            An argument is not valid
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptHResult.Unexpected">
            <summary>
            The call was not expected (for example, the scripting engine
            has not yet been loaded or initialized)
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptInfoFlags.None">
            <summary>
            Not a valid option
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptInfoFlags.IUnknown">
            <summary>
            Returns the IUnknown interface for this item
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptInfoFlags.ITypeInfo">
            <summary>
            Returns the ITypeInfo interface for this item
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.ScriptInterruptFlags">
            <summary>
            Thread interruption options
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptInterruptFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptInterruptFlags.Debug">
            <summary>
            If supported, enter the scripting engine's debugger at the current script execution point
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptInterruptFlags.RaiseException">
            <summary>
            If supported by the scripting engine's language, let the script handle the exception.
            Otherwise, the script method is aborted and the error code is returned to the caller; that
            is, the event source or macro invoker.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptItemFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptItemFlags.IsVisible">
            <summary>
            Indicates that the item's name is available in the name space of the script, allowing
            access to the properties, methods, and events of the item. By convention the properties
            of the item include the item's children; therefore, all child object properties and
            methods (and their children, recursively) will be accessible.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptItemFlags.IsSource">
            <summary>
            Indicates that the item sources events that the script can sink. Child objects
            (properties of the object that are in themselves objects) can also source events to the
            script. This is not recursive, but it provides a convenient mechanism for the common
            case, for example, of creating a container and all of its member controls.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptItemFlags.GlobalMembers">
            <summary>
            Indicates that the item is a collection of global properties and methods associated
            with the script. Normally, a scripting engine would ignore the object name (other than
            for the purpose of using it as a cookie for the IActiveScriptSite.GetItemInfo method,
            or for resolving explicit scoping) and expose its members as global variables and
            methods. This allows the host to extend the library (run-time functions and so on)
            available to the script. It is left to the scripting engine to deal with name conflicts
            (for example, when two ScriptItemFlags.GlobalMembers items have methods of the same
            name), although an error should not be returned because of this situation.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptItemFlags.IsPersistent">
            <summary>
            Indicates that the item should be saved if the scripting engine is saved. Similarly,
            setting this flag indicates that a transition back to the initialized state should
            retain the item's name and type information (the scripting engine must, however, release
            all pointers to interfaces on the actual object).
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptItemFlags.CodeOnly">
            <summary>
            Indicates that the named item represents a code-only object, and that the host has no
            IUnknown to be associated with this code-only object. The host only has a name for this
            object. In object-oriented languages such as C++, this flag would create a class.
            Not all languages support this flag.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptItemFlags.NoCode">
            <summary>
            Indicates that the item is simply a name being added to the script's name space, and
            should not be treated as an item for which code should be associated. For example,
            without this flag being set, VBScript will create a separate module for the named item,
            and C++ might create a separate wrapper class for the named item.
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.ScriptLanguageVersion">
            <summary>
            Version of script language (see https://msdn.microsoft.com/en-gb/library/hh769820(v=vs.94).aspx)
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptLanguageVersion.None">
            <summary>
            Version not selected
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptLanguageVersion.Default">
            <summary>
            Default version
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptLanguageVersion.WindowsScripting57">
            <summary>
            Windows Scripting version 5.7
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptLanguageVersion.WindowsScripting58">
            <summary>
            Windows Scripting version 5.8
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptLanguageVersion.EcmaScript5">
            <summary>
            ECMAScript 5
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.ScriptProperty">
            <summary>
            Script property (see https://msdn.microsoft.com/en-us/subscriptions/downloads/cc512774(v=vs.94).aspx)
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptProperty.IntegerMode">
            <summary>
            Forces the scripting engine to divide in integer mode instead of floating point mode.
            The default value is False.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptProperty.StringCompareInstance">
            <summary>
            Allows the string compare function of the scripting engine to be replaced
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptProperty.AbbreviateGlobalNameResolution">
            <summary>
            Informs the scripting engine that no other scripting engines exist to contribute
            to the global object
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptProperty.InvokeVersioning">
            <summary>
            Forces the JavaScript scripting engine to select a set of language features to be supported.
            The default set of language features supported by the JavaScript scripting engine is equivalent
            to the language feature set that appeared in version 5.7 of the JavaScript scripting engine.
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.ScriptState">
            <summary>
            Contains named constant values that specify the state of a scripting engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptState.Uninitialized">
            <summary>
            Script has just been created, but has not yet been initialized using an IPersist*
            interface and IActiveScript.SetScriptSite
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptState.Started">
            <summary>
            Script can execute code, but is not yet sinking the events of objects added by
            the IActiveScript.AddNamedItem method
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptState.Connected">
            <summary>
            Script is loaded and connected for sinking events
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptState.Disconnected">
            <summary>
            Script is loaded and has a run-time execution state, but is temporarily
            disconnected from sinking events
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptState.Closed">
            <summary>
            Script has been closed. The scripting engine no longer works and returns errors
            for most methods
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptState.Initialized">
            <summary>
            Script has been initialized, but is not running (connecting to other objects or
            sinking events) or executing any code. Code can be queried for execution by
            calling the IActiveScriptParse.ParseScriptText method.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptTextFlags.IsVisible">
            <summary>
            Indicates that the script text should be visible (and, therefore, callable by name) as a global
            method in the name space of the script
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptTextFlags.IsExpression">
            <summary>
            If the distinction between a computational expression and a statement is important but
            syntactically ambiguous in the script language, this flag specifies that the scriptlet is to be
            interpreted as an expression, rather than as a statement or list of statements. By default,
            statements are assumed unless the correct choice can be determined from the syntax of the
            scriptlet text
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptTextFlags.IsPersistent">
            <summary>
            Indicates that the code added during this call should be saved if the scripting engine is saved
            (for example, through a call to IPersist*::Save), or if the scripting engine is reset by way of
            a transition back to the initialized state. For more information about this state, see Script
            Engine States
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.ActiveScript.ScriptThreadState">
            <summary>
            Contains named constant values that specify the state of a thread in a scripting
            engine. This enumeration is used by the IActiveScript::GetScriptThreadState method
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptThreadState.NotInScript">
            <summary>
            Specified thread is not currently servicing a scripted event, processing
            immediately executed script text, or running a script macro
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptThreadState.Running">
            <summary>
            Specified thread is actively servicing a scripted event, processing
            immediately executed script text, or running a script macro
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptTypeLibFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptTypeLibFlags.IsControl">
            <summary>
            The type library describes an ActiveX control used by the host
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.ActiveScript.ScriptTypeLibFlags.IsPersistent">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.Constants.ComErrorCode">
            <summary>
            COM error codes
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.Constants.DllName">
            <summary>
            DLL names
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.Constants.SpecialMemberName">
            <summary>
            Special member names
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.Helpers.ComHelpers">
            <summary>
            COM helpers
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.Helpers.JsErrorHelpers">
            <summary>
            JavaScript engine error helpers
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.JsErrorHelpers.Format(MsieJavaScriptEngine.JsEngineLoadException)">
            <summary>
            Generates a detailed error message
            </summary>
            <param name="jsEngineLoadException">JavaScript engine load exception</param>
            <returns>Detailed error message</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.JsErrorHelpers.Format(MsieJavaScriptEngine.JsRuntimeException)">
            <summary>
            Generates a detailed error message
            </summary>
            <param name="jsRuntimeException">JavaScript runtime exception</param>
            <returns>Detailed error message</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.Helpers.NumericHelpers">
            <summary>
            Numeric helpers
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.NumericHelpers.IsNumericType(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is one of the numeric types
            </summary>
            <param name="type">The type</param>
            <returns>true if the specified type is one of the numeric types; otherwise, false</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.NumericHelpers.CastDoubleValueToCorrectType(System.Double)">
            <summary>
            Casts a double value to the correct type
            </summary>
            <param name="value">Double value</param>
            <returns>Numeric value with the correct type</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.Helpers.TypeMappingHelpers">
            <summary>
            Type mapping helpers
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.TypeMappingHelpers.MapToScriptType(System.Object,MsieJavaScriptEngine.JsEngineMode)">
            <summary>
            Makes a mapping of value from the host type to a script type
            </summary>
            <param name="value">The source value</param>
            <param name="engineMode">JavaScript engine mode</param>
            <returns>The mapped value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.TypeMappingHelpers.MapToScriptType(System.Object[],MsieJavaScriptEngine.JsEngineMode)">
            <summary>
            Makes a mapping of array items from the host type to a script type
            </summary>
            <param name="args">The source array</param>
            <param name="engineMode">JavaScript engine mode</param>
            <returns>The mapped array</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.TypeMappingHelpers.MapToHostType(System.Object)">
            <summary>
            Makes a mapping of value from the script type to a host type
            </summary>
            <param name="value">The source value</param>
            <returns>The mapped value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.TypeMappingHelpers.MapToHostType(System.Object[])">
            <summary>
            Makes a mapping of array itemp from the script type to a host type
            </summary>
            <param name="args">The source array</param>
            <returns>The mapped array</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.Helpers.ValidationHelpers">
            <summary>
            Validation helpers
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.Helpers.ValidationHelpers._supportedTypes">
            <summary>
            List of supported types
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.Helpers.ValidationHelpers._jsNameRegex">
            <summary>
            Regular expression for working with JS-names
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.ValidationHelpers.IsSupportedType(System.Type)">
            <summary>
            Checks whether supports a .NET type
            </summary>
            <param name="type">.NET type</param>
            <returns>Result of check (true - is supported; false - is not supported)</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.ValidationHelpers.IsPrimitiveType(System.Type)">
            <summary>
            Checks whether .NET type is primitive
            </summary>
            <param name="type">.NET type</param>
            <returns>Result of check (true - is primitive; false - is not primitive)</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Helpers.ValidationHelpers.CheckNameFormat(System.String)">
            <summary>
            Checks a format of the name
            </summary>
            <param name="name">The name</param>
            <returns>Result of check (true - correct format; false - wrong format)</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase">
            <summary>
            Base class of the Chakra JsRT JavaScript engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase._engineMode">
            <summary>
            JavaScript engine mode
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase._engineModeName">
            <summary>
            Name of JavaScript engine mode
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase._enableDebugging">
            <summary>
            Flag for whether to enable script debugging features
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase._debuggingStartedFlag">
            <summary>
            Flag indicating whether debugging started
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase._dispatcher">
            <summary>
            Script dispatcher
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase._disposedFlag">
            <summary>
            Flag that object is destroyed
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase.#ctor(MsieJavaScriptEngine.JsEngineMode,System.Boolean)">
            <summary>
            Constructs an instance of the Chakra JsRT JavaScript engine
            </summary>
            <param name="engineMode">JavaScript engine mode</param>
            <param name="enableDebugging">Flag for whether to enable script debugging features</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase.StartDebugging">
            <summary>
            Starts debugging
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase.Dispose(System.Boolean)">
            <summary>
            Destroys object
            </summary>
            <param name="disposing">Flag, allowing destruction of
            managed objects contained in fields of class</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback">
            <summary>
            IActiveScriptProfilerCallback COM interface
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback.Initialize(System.UInt32)">
            <summary>
            Called when the profile is started
            </summary>
            <param name="context">The context provided when profiling was started</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback.Shutdown(System.UInt32)">
            <summary>
            Called when profiling is stopped
            </summary>
            <param name="reason">The reason code provided when profiling was stopped</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback.ScriptCompiled(System.Int32,MsieJavaScriptEngine.JsRt.ProfilerScriptType,System.IntPtr)">
            <summary>
            Called when a script is compiled
            </summary>
            <param name="scriptId">The ID of the script</param>
            <param name="type">The type of the script</param>
            <param name="debugDocumentContext">The debug document context, if any</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback.FunctionCompiled(System.Int32,System.Int32,System.String,System.String,System.IntPtr)">
            <summary>
            Called when a function is compiled
            </summary>
            <param name="functionId">The ID of the function</param>
            <param name="scriptId">The ID of the script</param>
            <param name="functionName">The name of the function</param>
            <param name="functionNameHint">The function name hint</param>
            <param name="debugDocumentContext">The debug document context, if any</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback.OnFunctionEnter(System.Int32,System.Int32)">
            <summary>
            Called when a function is entered
            </summary>
            <param name="scriptId">The ID of the script</param>
            <param name="functionId">The ID of the function</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback.OnFunctionExit(System.Int32,System.Int32)">
            <summary>
            Called when a function is exited
            </summary>
            <param name="scriptId">The ID of the script</param>
            <param name="functionId">The ID of the function</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback2">
            <summary>
            IActiveScriptProfilerCallback2 COM interface
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback2.OnFunctionEnterByName(System.String,MsieJavaScriptEngine.JsRt.ProfilerScriptType)">
            <summary>
            Called when a function is entered by name
            </summary>
            <param name="functionName">The name of the function</param>
            <param name="type">The type of the function</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback2.OnFunctionExitByName(System.String,MsieJavaScriptEngine.JsRt.ProfilerScriptType)">
            <summary>
            Called when a function is exited by name
            </summary>
            <param name="functionName">The name of the function</param>
            <param name="type">The type of the function</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.IActiveScriptProfilerHeapEnum">
            <summary>
            IActiveScriptProfilerHeapEnum COM interface
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsBackgroundWorkItemCallback">
            <summary>
            The background work item callback
            </summary>
            <remarks>
            This is passed to the host's thread service (if provided) to allow the host to
            invoke the work item callback on the background thread of its choice.
            </remarks>
            <param name="callbackData">Data argument passed to the thread service</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsBeforeCollectCallback">
            <summary>
            The callback called before collection
            </summary>
            <param name="callbackState">The state passed to SetBeforeCollectCallback</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsEngineException">
            <summary>
            The exception that occurred in the workings of the JavaScript engine itself
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsEngineException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsEngineException"/> class
            </summary>
            <param name="errorCode">The error code returned</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsEngineException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsEngineException"/> class
            with a specified error message
            </summary>
            <param name="errorCode">The error code returned</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsEngineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsEngineException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsErrorCode">
            <summary>
            The error code returned from a Chakra hosting API
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.NoError">
            <summary>
            Success error code
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.CategoryUsage">
            <summary>
            Category of errors that relates to incorrect usage of the API itself
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.InvalidArgument">
            <summary>
            An argument to a hosting API was invalid
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.NullArgument">
            <summary>
            An argument to a hosting API was null in a context where null is not allowed
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.NoCurrentContext">
            <summary>
            The hosting API requires that a context be current, but there is no current context
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.InExceptionState">
            <summary>
            The engine is in an exception state and no APIs can be called until the exception is
            cleared
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.NotImplemented">
            <summary>
            A hosting API is not yet implemented
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.WrongThread">
            <summary>
            A hosting API was called on the wrong thread
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.RuntimeInUse">
            <summary>
            A runtime that is still in use cannot be disposed
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.BadSerializedScript">
            <summary>
            A bad serialized script was used, or the serialized script was serialized by a
            different version of the Chakra engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.InDisabledState">
            <summary>
            The runtime is in a disabled state
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.CannotDisableExecution">
            <summary>
            Runtime does not support reliable script interruption
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.HeapEnumInProgress">
            <summary>
            A heap enumeration is currently underway in the script context
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.ArgumentNotObject">
            <summary>
            A hosting API that operates on Object values was called with a non-Object value
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.InProfileCallback">
            <summary>
            A script context is in the middle of a profile callback
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.InThreadServiceCallback">
            <summary>
            A thread service callback is currently underway
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.CannotSerializeDebugScript">
            <summary>
            Scripts cannot be serialized in debug contexts
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.AlreadyDebuggingContext">
            <summary>
            The context cannot be put into a debug state because it is already in a debug state
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.AlreadyProfilingContext">
            <summary>
            The context cannot start profiling because it is already profiling
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.IdleNotEnabled">
            <summary>
            Idle notification given when the host did not enable idle processing
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.CategoryEngine">
            <summary>
            Category of errors that relates to errors occurring within the engine itself
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.OutOfMemory">
            <summary>
            The Chakra engine has run out of memory
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.CategoryScript">
            <summary>
            Category of errors that relates to errors in a script
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.ScriptException">
            <summary>
            A JavaScript exception occurred while running a script
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.ScriptCompile">
            <summary>
            JavaScript failed to compile
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.ScriptTerminated">
            <summary>
            A script was terminated due to a request to suspend a runtime
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.ScriptEvalDisabled">
            <summary>
            A script was terminated because it tried to use "eval" or "function" and eval was disabled
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.CategoryFatal">
            <summary>
            Category of errors that are fatal and signify failure of the engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsErrorCode.Fatal">
            <summary>
            A fatal error in the engine has occurred
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsException">
            <summary>
            The exception returned from the Chakra engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsException._errorCode">
            <summary>
            The error code
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.JsException.ErrorCode">
            <summary>
            Gets a error code
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsException"/> class
            </summary>
            <param name="errorCode">The error code returned</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsException"/> class
            with a specified error message
            </summary>
            <param name="errorCode">The error code returned</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsFatalException">
            <summary>
            The fatal exception occurred
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsFatalException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsFatalException"/> class
            </summary>
            <param name="errorCode">The error code returned</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsFatalException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsFatalException"/> class
            with a specified error message
            </summary>
            <param name="errorCode">The error code returned</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsFatalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsFatalException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsMemoryAllocationCallback">
            <summary>
            User implemented callback routine for memory allocation events
            </summary>
            <param name="callbackState">The state passed to SetRuntimeMemoryAllocationCallback</param>
            <param name="allocationEvent">The type of type allocation event</param>
            <param name="allocationSize">The size of the allocation</param>
            <returns>
            For the Allocate event, returning true allows the runtime to continue with
            allocation. Returning false indicates the allocation request is rejected. The return value
            is ignored for other allocation events.
            </returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsMemoryEventType">
            <summary>
            Allocation callback event type
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsMemoryEventType.Allocate">
            <summary>
            Indicates a request for memory allocation
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsMemoryEventType.Free">
            <summary>
            Indicates a memory freeing event
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsMemoryEventType.Failure">
            <summary>
            Indicates a failed allocation event
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsObjectFinalizeCallback">
            <summary>
            The finalization callback
            </summary>
            <param name="data">The external data that was passed in when creating the object being finalized</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsRuntimeAttributes">
            <summary>
            Attributes of a runtime
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsRuntimeAttributes.None">
            <summary>
            No special attributes
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsRuntimeAttributes.DisableBackgroundWork">
            <summary>
            The runtime will not do any work (such as garbage collection) on background threads
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsRuntimeAttributes.AllowScriptInterrupt">
            <summary>
            The runtime should support reliable script interruption. This increases the number of
            places where the runtime will check for a script interrupt request at the cost of a
            small amount of runtime performance.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsRuntimeAttributes.EnableIdleProcessing">
            <summary>
            Host will call Idle, so enable idle processing. Otherwise, the runtime will manage
            memory slightly more aggressively.
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsRuntimeAttributes.DisableNativeCodeGeneration">
            <summary>
            Runtime will not generate native code
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsRuntimeAttributes.DisableEval">
            <summary>
            Using Eval or Function constructor will throw an exception
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsRuntimeVersion">
            <summary>
            Version of the runtime
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsRuntimeVersion.Version10">
            <summary>
            Create runtime with IE10 version
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsRuntimeVersion.Version11">
            <summary>
            Create runtime with IE11 version
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsRuntimeVersion.VersionEdge">
            <summary>
            Create runtime with highest version present on the machine at runtime
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsSourceContext">
            <summary>
            The cookie that identifies a script for debugging purposes
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsSourceContext._context">
            <summary>
            The context
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.JsSourceContext.None">
            <summary>
            Gets a empty source context
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsSourceContext"/> struct
            </summary>
            <param name="context">The context</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.op_Equality(MsieJavaScriptEngine.JsRt.JsSourceContext,MsieJavaScriptEngine.JsRt.JsSourceContext)">
            <summary>
            The equality operator for source contexts
            </summary>
            <param name="left">The first source context to compare</param>
            <param name="right">The second source context to compare</param>
            <returns>Whether the two source contexts are the same</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.op_Inequality(MsieJavaScriptEngine.JsRt.JsSourceContext,MsieJavaScriptEngine.JsRt.JsSourceContext)">
            <summary>
            The inequality operator for source contexts
            </summary>
            <param name="left">The first source context to compare</param>
            <param name="right">The second source context to compare</param>
            <returns>Whether the two source contexts are not the same</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.op_Subtraction(MsieJavaScriptEngine.JsRt.JsSourceContext,System.Int32)">
            <summary>
            Subtracts a offset from the value of the source context
            </summary>
            <param name="context">The source context to subtract the offset from</param>
            <param name="offset">The offset to subtract</param>
            <returns>A new source context that reflects the subtraction of the offset from the context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.Subtract(MsieJavaScriptEngine.JsRt.JsSourceContext,System.Int32)">
            <summary>
            Subtracts a offset from the value of the source context
            </summary>
            <param name="left">The source context to subtract the offset from</param>
            <param name="right">The offset to subtract</param>
            <returns>A new source context that reflects the subtraction of the offset from the context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.op_Decrement(MsieJavaScriptEngine.JsRt.JsSourceContext)">
            <summary>
            Decrements a value of the source context
            </summary>
            <param name="context">The source context to decrement</param>
            <returns>The new source context that reflects the decrementing of the context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.Decrement(MsieJavaScriptEngine.JsRt.JsSourceContext)">
            <summary>
            Decrements a value of the source context
            </summary>
            <param name="left">The source context to decrement</param>
            <returns>The new source context that reflects the decrementing of the context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.op_Addition(MsieJavaScriptEngine.JsRt.JsSourceContext,System.Int32)">
            <summary>
            Adds a offset from the value of the source context
            </summary>
            <param name="context">The source context to add the offset to</param>
            <param name="offset">The offset to add</param>
            <returns>The new source context that reflects the addition of the offset to the context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.Add(MsieJavaScriptEngine.JsRt.JsSourceContext,System.Int32)">
            <summary>
            Adds a offset from the value of the source context
            </summary>
            <param name="left">The source context to add the offset to</param>
            <param name="right">The offset to add</param>
            <returns>The new source context that reflects the addition of the offset to the context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.op_Increment(MsieJavaScriptEngine.JsRt.JsSourceContext)">
            <summary>
            Increments a value of the source context
            </summary>
            <param name="context">The source context to increment</param>
            <returns>The new source context that reflects the incrementing of the context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.Increment(MsieJavaScriptEngine.JsRt.JsSourceContext)">
            <summary>
            Increments a value of the source context
            </summary>
            <param name="left">The source context to increment</param>
            <returns>The new source context that reflects the incrementing of the context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.FromIntPtr(System.IntPtr)">
            <summary>
            Creates a new source context
            </summary>
            <param name="cookie">The cookie for the source context</param>
            <returns>The new source context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.Equals(System.Object)">
            <summary>
            Checks for equality between source contexts
            </summary>
            <param name="obj">The other source context to compare</param>
            <returns>Whether the two source contexts are the same</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.GetHashCode">
            <summary>
            The hash code
            </summary>
            <returns>The hash code of the source context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsSourceContext.Equals(MsieJavaScriptEngine.JsRt.JsSourceContext)">
            <summary>
            Checks for equality between source contexts
            </summary>
            <param name="other">The other source context to compare</param>
            <returns>Whether the two source contexts are the same</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsThreadServiceCallback">
            <summary>
            The thread service callback
            </summary>
            <remarks>
            The host can specify a background thread service when creating a runtime. If
            specified, then background work items will be passed to the host using this callback. The
            host is expected to either begin executing the background work item immediately and return
            true or return false and the runtime will handle the work item in-thread.
            </remarks>
            <param name="callbackFunction">The callback for the background work item</param>
            <param name="callbackData">The data argument to be passed to the callback</param>
            <returns>Whether the thread service will execute the callback</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsUsageException">
            <summary>
            The API usage exception occurred
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsUsageException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsUsageException"/> class
            </summary>
            <param name="errorCode">The error code returned</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsUsageException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsUsageException"/> class
            with a specified error message
            </summary>
            <param name="errorCode">The error code returned</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.JsUsageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.JsUsageException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.JsValueType">
            <summary>
            The JavaScript type of a JavaScript value
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsValueType.Undefined">
            <summary>
            The value is the <c>undefined</c> value
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsValueType.Null">
            <summary>
            The value is the <c>null</c> value
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsValueType.Number">
            <summary>
            The value is a JavaScript number value
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsValueType.String">
            <summary>
            The value is a JavaScript string value
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsValueType.Boolean">
            <summary>
            The value is a JavaScript Boolean value
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsValueType.Object">
            <summary>
            The value is a JavaScript object value
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsValueType.Function">
            <summary>
            The value is a JavaScript function object value
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsValueType.Error">
            <summary>
            The value is a JavaScript error object value
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.JsValueType.Array">
            <summary>
            The value is a JavaScript array object value
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.ProfilerEventMask">
            <summary>
            Event mask for profiling
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ProfilerEventMask.TraceScriptFunctionCall">
            <summary>
            Trace calls to script functions
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ProfilerEventMask.TraceNativeFunctionCall">
            <summary>
            Trace calls to built-in functions
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ProfilerEventMask.TraceDomFunctionCall">
            <summary>
            Trace calls to DOM methods
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ProfilerEventMask.TraceAll">
            <summary>
            Trace all calls except DOM methods
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ProfilerEventMask.TraceAllWithDom">
            <summary>
            Trace all calls
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.ProfilerScriptType">
            <summary>
            Profiled script type
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ProfilerScriptType.User">
            <summary>
            The user script
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ProfilerScriptType.Dynamic">
            <summary>
            The dynamic script
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ProfilerScriptType.Native">
            <summary>
            The native script
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.ProfilerScriptType.Dom">
            <summary>
            The DOM-related script
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine">
            <summary>
            âEdgeâ JsRT version of Chakra JavaScript engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine._jsRuntime">
            <summary>
            Instance of JavaScript runtime
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine._jsContext">
            <summary>
            Instance of JavaScript context
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine._isSupported">
            <summary>
            Flag indicating whether this JavaScript engine is supported
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine._supportSynchronizer">
            <summary>
            Support synchronizer
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.#ctor(System.Boolean)">
            <summary>
            Constructs an instance of the Chakra âEdgeâ JsRT JavaScript engine
            </summary>
            <param name="enableDebugging">Flag for whether to enable script debugging features</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.Finalize">
            <summary>
            Destructs an instance of the Chakra âEdgeâ JsRT JavaScript engine
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.CreateJsRuntime">
            <summary>
            Creates a instance of JavaScript runtime with special settings
            </summary>
            <returns>Instance of JavaScript runtime with special settings</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.IsSupported">
            <summary>
            Checks a support of the Chakra âEdgeâ JsRT JavaScript engine
            </summary>
            <returns>Result of check (true - supports; false - does not support)</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.MapToScriptType(System.Object)">
            <summary>
            Makes a mapping of value from the host type to a script type
            </summary>
            <param name="value">The source value</param>
            <returns>The mapped value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.MapToScriptType(System.Object[])">
            <summary>
            Makes a mapping of array items from the host type to a script type
            </summary>
            <param name="args">The source array</param>
            <returns>The mapped array</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.MapToHostType(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Makes a mapping of value from the script type to a host type
            </summary>
            <param name="value">The source value</param>
            <returns>The mapped value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.MapToHostType(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue[])">
            <summary>
            Makes a mapping of array items from the script type to a host type
            </summary>
            <param name="args">The source array</param>
            <returns>The mapped array</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.AddReferenceToValue(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Adds a reference to the value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.RemoveReferenceToValue(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Removes a reference to the value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.CanHaveReferences(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Checks whether the value can have references
            </summary>
            <param name="value">The value</param>
            <returns>Result of check (true - may have; false - may not have)</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.Dispose">
            <summary>
            Destroys object
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine.Dispose(System.Boolean)">
            <summary>
            Destroys object
            </summary>
            <param name="disposing">Flag, allowing destruction of
            managed objects contained in fields of class</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext">
            <summary>
            âEdgeâ script context
            </summary>
            <remarks>
            <para>
            Each script context contains its own global object, distinct from the global object in
            other script contexts.
            </para>
            <para>
            Many Chakra hosting APIs require an "active" script context, which can be set using
            Current. Chakra hosting APIs that require a current context to be set will note
            that explicitly in their documentation.
            </para>
            </remarks>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext._reference">
            <summary>
            The reference
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.Invalid">
            <summary>
            Gets a invalid context
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.Current">
            <summary>
            Gets or sets a current script context on the thread
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.HasException">
            <summary>
            Gets a value indicating whether the runtime of the current context is in an exception state
            </summary>
            <remarks>
            <para>
            If a call into the runtime results in an exception (either as the result of running a
            script or due to something like a conversion failure), the runtime is placed into an
            "exception state." All calls into any context created by the runtime (except for the
            exception APIs) will fail with <c>InExceptionState</c> until the exception is
            cleared.
            </para>
            <para>
            If the runtime of the current context is in the exception state when a callback returns
            into the engine, the engine will automatically rethrow the exception.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.IsEnumeratingHeap">
            <summary>
            Gets a value indicating whether the heap of the current context is being enumerated
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.Runtime">
            <summary>
            Gets a runtime that the context belongs to
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.IsValid">
            <summary>
            Gets a value indicating whether the context is a valid context or not
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext"/> struct
            </summary>
            <param name="reference">The reference</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.Idle">
            <summary>
            Tells a runtime to do any idle processing it need to do
            </summary>
            <remarks>
            <para>
            If idle processing has been enabled for the current runtime, calling <c>Idle</c> will
            inform the current runtime that the host is idle and that the runtime can perform
            memory cleanup tasks.
            </para>
            <para>
            <c>Idle</c> will also return the number of system ticks until there will be more idle work
            for the runtime to do. Calling <c>Idle</c> before this number of ticks has passed will do
            no work.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>
            The next system tick when there will be more idle work to do. Returns the
            maximum number of ticks if there no upcoming idle work to do.
            </returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.ParseScript(System.String,MsieJavaScriptEngine.JsRt.JsSourceContext,System.String)">
            <summary>
            Parses a script and returns a <c>Function</c> representing the script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to parse</param>
            <param name="sourceContext">The cookie identifying the script that can be used
            by script contexts that have debugging enabled</param>
            <param name="sourceName">The location the script came from</param>
            <returns>The <c>Function</c> representing the script code</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.ParseScript(System.String,System.Byte[],MsieJavaScriptEngine.JsRt.JsSourceContext,System.String)">
            <summary>
            Parses a serialized script and returns a <c>Function</c> representing the script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to parse</param>
            <param name="buffer">The serialized script</param>
            <param name="sourceContext">The cookie identifying the script that can be used
            by script contexts that have debugging enabled</param>
            <param name="sourceName">The location the script came from</param>
            <returns>The <c>Function</c> representing the script code</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.ParseScript(System.String)">
            <summary>
            Parses a script and returns a <c>Function</c> representing the script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to parse</param>
            <returns>The <c>Function</c> representing the script code</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.ParseScript(System.String,System.Byte[])">
            <summary>
            Parses a serialized script and returns a <c>Function</c> representing the script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to parse</param>
            <param name="buffer">The serialized script</param>
            <returns>The <c>Function</c> representing the script code</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.RunScript(System.String,MsieJavaScriptEngine.JsRt.JsSourceContext,System.String)">
            <summary>
            Executes a script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to run</param>
            <param name="sourceContext">The cookie identifying the script that can be used
            by script contexts that have debugging enabled</param>
            <param name="sourceName">The location the script came from</param>
            <returns>The result of the script, if any</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.RunScript(System.String,System.Byte[],MsieJavaScriptEngine.JsRt.JsSourceContext,System.String)">
            <summary>
            Runs a serialized script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The source code of the serialized script</param>
            <param name="buffer">The serialized script</param>
            <param name="sourceContext">The cookie identifying the script that can be used
            by script contexts that have debugging enabled</param>
            <param name="sourceName">The location the script came from</param>
            <returns>The result of the script, if any</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.RunScript(System.String)">
            <summary>
            Executes a script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to run</param>
            <returns>The result of the script, if any</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.RunScript(System.String,System.Byte[])">
            <summary>
            Runs a serialized script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The source code of the serialized script</param>
            <param name="buffer">The serialized script</param>
            <returns>The result of the script, if any</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.SerializeScript(System.String,System.Byte[])">
            <summary>
            Serializes a parsed script to a buffer than can be reused
            </summary>
            <remarks>
            <para>
            SerializeScript parses a script and then stores the parsed form of the script in a
            runtime-independent format. The serialized script then can be deserialized in any
            runtime without requiring the script to be re-parsed.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="script">The script to serialize</param>
            <param name="buffer">The buffer to put the serialized script into. Can be null.</param>
            <returns>The size of the buffer, in bytes, required to hold the serialized script</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.GetAndClearException">
            <summary>
            Returns a exception that caused the runtime of the current context to be in the
            exception state and resets the exception state for that runtime
            </summary>
            <remarks>
            <para>
            If the runtime of the current context is not in an exception state, this API will throw
            <c>JsErrorInvalidArgument</c>. If the runtime is disabled, this will return an exception
            indicating that the script was terminated, but it will not clear the exception (the
            exception will be cleared if the runtime is re-enabled using
            <c>EnableRuntimeExecution</c>).
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>The exception for the runtime of the current context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.SetException(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Sets a runtime of the current context to an exception state
            </summary>
            <remarks>
            <para>
            If the runtime of the current context is already in an exception state, this API will
            throw <c>JsErrorInExceptionState</c>.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="exception">The JavaScript exception to set for the runtime of the current context</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.StartDebugging">
            <summary>
            Starts debugging in the context
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.StartProfiling(MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback,MsieJavaScriptEngine.JsRt.ProfilerEventMask,System.Int32)">
            <summary>
            Starts profiling in the current context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="callback">The profiling callback to use</param>
            <param name="eventMask">The profiling events to callback with</param>
            <param name="context">A context to pass to the profiling callback</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.StopProfiling(System.Int32)">
            <summary>
            Stops profiling in the current context
            </summary>
            <remarks>
            <para>
            Will not return an error if profiling has not started.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="reason">The reason for stopping profiling to pass to the profiler callback</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.EnumerateHeap">
            <summary>
            Enumerates a heap of the current context.
            </summary>
            <remarks>
            <para>
            While the heap is being enumerated, the current context cannot be removed, and all calls to
            modify the state of the context will fail until the heap enumerator is released.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>A heap enumerator</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.AddRef">
            <summary>
            Adds a reference to a script context
            </summary>
            <remarks>
            Calling AddRef ensures that the context will not be freed until Release is called.
            </remarks>
            <returns>The object's new reference count</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext.Release">
            <summary>
            Releases a reference to a script context
            </summary>
            <remarks>
            Removes a reference to a context that was created by AddRef.
            </remarks>
            <returns>The object's new reference count</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsErrorHelpers">
            <summary>
            âEdgeâ error helpers
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsErrorHelpers.ThrowIfError(MsieJavaScriptEngine.JsRt.JsErrorCode)">
            <summary>
            Throws if a native method returns an error code
            </summary>
            <param name="error">The error</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsErrorHelpers.CreateError(System.String)">
            <summary>
            Creates a new JavaScript error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsErrorHelpers.CreateRangeError(System.String)">
            <summary>
            Creates a new JavaScript RangeError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsErrorHelpers.CreateReferenceError(System.String)">
            <summary>
            Creates a new JavaScript ReferenceError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsErrorHelpers.CreateSyntaxError(System.String)">
            <summary>
            Creates a new JavaScript SyntaxError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsErrorHelpers.CreateTypeError(System.String)">
            <summary>
            Creates a new JavaScript TypeError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsErrorHelpers.CreateUriError(System.String)">
            <summary>
            Creates a new JavaScript URIError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsErrorHelpers.SetException(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Sets a exception
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="exception">The error object</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsNativeFunction">
            <summary>
            âEdgeâ function callback
            </summary>
            <param name="callee">The <c>Function</c> object that represents the function being invoked</param>
            <param name="isConstructCall">Indicates whether this is a regular call or a 'new' call</param>
            <param name="arguments">The arguments to the call</param>
            <param name="argumentCount">The number of arguments</param>
            <param name="callbackData">Callback data, if any</param>
            <returns>The result of the call, if any</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId">
            <summary>
            âEdgeâ property identifier
            </summary>
            <remarks>
            Property identifiers are used to refer to properties of JavaScript objects instead of using
            strings.
            </remarks>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId._id">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId.Invalid">
            <summary>
            Gets a invalid ID
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId.Name">
            <summary>
            Gets a name associated with the property ID
            </summary>
            <remarks>
            <para>
            Requires an active script context.
            </para>
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId"/> struct
            </summary>
            <param name="id">The ID</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId.FromString(System.String)">
            <summary>
            Gets a property ID associated with the name
            </summary>
            <remarks>
            <para>
            Property IDs are specific to a context and cannot be used across contexts.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="name">The name of the property ID to get or create.
            The name may consist of only digits.</param>
            <returns>The property ID in this runtime for the given name</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId.op_Equality(MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId,MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId)">
            <summary>
            The equality operator for property IDs
            </summary>
            <param name="left">The first property ID to compare</param>
            <param name="right">The second property ID to compare</param>
            <returns>Whether the two property IDs are the same</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId.op_Inequality(MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId,MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId)">
            <summary>
            The inequality operator for property IDs
            </summary>
            <param name="left">The first property ID to compare</param>
            <param name="right">The second property ID to compare</param>
            <returns>Whether the two property IDs are not the same</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId.Equals(System.Object)">
            <summary>
            Checks for equality between property IDs
            </summary>
            <param name="obj">The other property ID to compare</param>
            <returns>Whether the two property IDs are the same</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId.GetHashCode">
            <summary>
            The hash code
            </summary>
            <returns>The hash code of the property ID</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId.ToString">
            <summary>
            Converts a property ID to a string
            </summary>
            <returns>The name of the property ID</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId.Equals(MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId)">
            <summary>
            Checks for equality between property IDs
            </summary>
            <param name="other">The other property ID to compare</param>
            <returns>Whether the two property IDs are the same</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime">
            <summary>
            âEdgeâ Chakra runtime
            </summary>
            <remarks>
            <para>
            Each Chakra runtime has its own independent execution engine, JIT compiler, and garbage
            collected heap. As such, each runtime is completely isolated from other runtimes.
            </para>
            <para>
            Runtimes can be used on any thread, but only one thread can call into a runtime at any
            time.
            </para>
            <para>
            NOTE: A <see cref="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime" />, unlike other objects in the Chakra hosting API, is not
            garbage collected since it contains the garbage collected heap itself. A runtime will
            continue to exist until Dispose is called.
            </para>
            </remarks>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime._handle">
            <summary>
            The handle
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.IsValid">
            <summary>
            Gets a value indicating whether the runtime is valid
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.MemoryUsage">
            <summary>
            Gets a current memory usage for a runtime
            </summary>
            <remarks>
            Memory usage can be always be retrieved, regardless of whether or not the runtime is active
            on another thread.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.MemoryLimit">
            <summary>
            Gets or sets a current memory limit for a runtime
            </summary>
            <remarks>
            The memory limit of a runtime can be always be retrieved, regardless of whether or not the
            runtime is active on another thread.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.Disabled">
            <summary>
            Gets or sets a value indicating whether script execution is disabled in the runtime
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.Create">
            <summary>
            Creates a new runtime
            </summary>
            <returns>The runtime created</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.Create(MsieJavaScriptEngine.JsRt.JsRuntimeAttributes)">
            <summary>
            Creates a new runtime
            </summary>
            <param name="attributes">The attributes of the runtime to be created</param>
            <returns>The runtime created</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.Create(MsieJavaScriptEngine.JsRt.JsRuntimeAttributes,MsieJavaScriptEngine.JsRt.JsThreadServiceCallback)">
            <summary>
            Creates a new runtime
            </summary>
            <param name="attributes">The attributes of the runtime to be created</param>
            <param name="threadServiceCallback">The thread service for the runtime. Can be null</param>
            <returns>The runtime created</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.CollectGarbage">
            <summary>
            Performs a full garbage collection
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.SetMemoryAllocationCallback(System.IntPtr,MsieJavaScriptEngine.JsRt.JsMemoryAllocationCallback)">
            <summary>
            Sets a memory allocation callback for specified runtime
            </summary>
            <remarks>
            <para>
            Registering a memory allocation callback will cause the runtime to call back to the host
            whenever it acquires memory from, or releases memory to, the OS. The callback routine is
            called before the runtime memory manager allocates a block of memory. The allocation will
            be rejected if the callback returns false. The runtime memory manager will also invoke the
            callback routine after freeing a block of memory, as well as after allocation failures.
            </para>
            <para>
            The callback is invoked on the current runtime execution thread, therefore execution is
            blocked until the callback completes.
            </para>
            <para>
            The return value of the callback is not stored; previously rejected allocations will not
            prevent the runtime from invoking the callback again later for new memory allocations.
            </para>
            </remarks>
            <param name="callbackState">User provided state that will be passed back to the callback</param>
            <param name="allocationCallback">Memory allocation callback to be called for memory allocation events</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.SetBeforeCollectCallback(System.IntPtr,MsieJavaScriptEngine.JsRt.JsBeforeCollectCallback)">
            <summary>
            Sets a callback function that is called by the runtime before garbage collection
            </summary>
            <remarks>
            <para>
            The callback is invoked on the current runtime execution thread, therefore execution is
            blocked until the callback completes.
            </para>
            <para>
            The callback can be used by hosts to prepare for garbage collection. For example, by
            releasing unnecessary references on Chakra objects.
            </para>
            </remarks>
            <param name="callbackState">User provided state that will be passed back to the callback</param>
            <param name="beforeCollectCallback">The callback function being set</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.CreateContext">
            <summary>
            Creates a debug script context for running scripts
            </summary>
            <remarks>
            Each script context has its own global object that is isolated from all other script
            contexts.
            </remarks>
            <returns>The created script context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime.Dispose">
            <summary>
            Disposes a runtime
            </summary>
            <remarks>
            Once a runtime has been disposed, all resources owned by it are invalid and cannot be used.
            If the runtime is active (i.e. it is set to be current on a particular thread), it cannot
            be disposed.
            </remarks>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScope">
            <summary>
            âEdgeâ scope automatically sets a context to current and resets the original context
            when disposed
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScope._previousContext">
            <summary>
            The previous context
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScope._disposedFlag">
            <summary>
            Whether the structure has been disposed
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScope.#ctor(MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScope"/> struct
            </summary>
            <param name="context">The context to create the scope for</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScope.Dispose">
            <summary>
            Disposes a scope and sets the previous context to current
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScriptException">
            <summary>
            âEdgeâ script exception
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScriptException._error">
            <summary>
            The error
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScriptException.Error">
            <summary>
            Gets a JavaScript object representing the script error
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScriptException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode,MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScriptException"/> class
            </summary>
            <param name="errorCode">The error code returned</param>
            <param name="error">The JavaScript error object</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScriptException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode,MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScriptException"/> class
            with a specified error message
            </summary>
            <param name="errorCode">The error code returned</param>
            <param name="error">The JavaScript error object</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsScriptException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue">
            <summary>
            âEdgeâ JavaScript value
            </summary>
            <remarks>
            The JavaScript value is one of the following types of values: Undefined, Null, Boolean,
            String, Number, or Object.
            </remarks>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue._reference">
            <summary>
            The reference
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.Invalid">
            <summary>
            Gets a invalid value
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.Undefined">
            <summary>
            Gets a value of <c>undefined</c> in the current script context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.Null">
            <summary>
            Gets a value of <c>null</c> in the current script context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.True">
            <summary>
            Gets a value of <c>true</c> in the current script context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.False">
            <summary>
            Gets a value of <c>false</c> in the current script context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.GlobalObject">
            <summary>
            Gets a global object in the current script context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.IsValid">
            <summary>
            Gets a value indicating whether the value is valid
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ValueType">
            <summary>
            Gets a JavaScript type of the value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The type of the value</returns>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.StringLength">
            <summary>
            Gets a length of a <c>String</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The length of the string</returns>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.Prototype">
            <summary>
            Gets or sets a prototype of an object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.IsExtensionAllowed">
            <summary>
            Gets a value indicating whether an object is extensible or not
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.HasExternalData">
            <summary>
            Gets a value indicating whether an object is an external object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ExternalData">
            <summary>
            Gets or sets a data in an external object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue"/> struct.
            </summary>
            <param name="reference">The reference</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.FromBoolean(System.Boolean)">
            <summary>
            Creates a <c>Boolean</c> value from a <c>bool</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="value">The value to be converted</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.FromDouble(System.Double)">
            <summary>
            Creates a <c>Number</c> value from a <c>double</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="value">The value to be converted</param>
            <returns>The new <c>Number</c> value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.FromInt32(System.Int32)">
            <summary>
            Creates a <c>Number</c> value from a <c>int</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="value">The value to be converted</param>
            <returns>The new <c>Number</c> value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.FromString(System.String)">
            <summary>
            Creates a <c>String</c> value from a string pointer
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="value">The string  to convert to a <c>String</c> value</param>
            <returns>The new <c>String</c> value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.FromObject(System.Object)">
            <summary>
            Creates a JavaScript value that is a projection of the passed in object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="value">The object to be projected</param>
            <returns>The JavaScript value that is a projection of the object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateObject">
            <summary>
            Creates a new <c>Object</c>
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The new <c>Object</c></returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateExternalObject(System.IntPtr,MsieJavaScriptEngine.JsRt.JsObjectFinalizeCallback)">
            <summary>
            Creates a new <c>Object</c> that stores some external data
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="data">External data that the object will represent. May be null</param>
            <param name="finalizer">The callback for when the object is finalized. May be null.</param>
            <returns>The new <c>Object</c></returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateFunction(MsieJavaScriptEngine.JsRt.Edge.EdgeJsNativeFunction)">
            <summary>
            Creates a new JavaScript function
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="function">The method to call when the function is invoked</param>
            <returns>The new function object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateFunction(MsieJavaScriptEngine.JsRt.Edge.EdgeJsNativeFunction,System.IntPtr)">
            <summary>
            Creates a new JavaScript function
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="function">The method to call when the function is invoked</param>
            <param name="callbackData">Data to be provided to all function callbacks</param>
            <returns>The new function object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateArray(System.UInt32)">
            <summary>
            Creates a JavaScript array object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="length">The initial length of the array</param>
            <returns>The new array object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateError(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Creates a new JavaScript error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateRangeError(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Creates a new JavaScript RangeError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateReferenceError(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Creates a new JavaScript ReferenceError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateSyntaxError(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Creates a new JavaScript SyntaxError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateTypeError(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Creates a new JavaScript TypeError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CreateUriError(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Creates a new JavaScript URIError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.AddRef">
            <summary>
            Adds a reference to the object
            </summary>
            <remarks>
            This only needs to be called on objects that are not going to be stored somewhere on
            the stack. Calling AddRef ensures that the JavaScript object the value refers to will not be freed
            until Release is called.
            </remarks>
            <returns>The object's new reference count</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.Release">
            <summary>
            Releases a reference to the object
            </summary>
            <remarks>
            Removes a reference that was created by AddRef.
            </remarks>
            <returns>The object's new reference count</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ToBoolean">
            <summary>
            Retrieves a <c>bool</c> value of a <c>Boolean</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ToDouble">
            <summary>
            Retrieves a <c>double</c> value of a <c>Number</c> value
            </summary>
            <remarks>
            <para>
            This function retrieves the value of a Number value. It will fail with
            <c>InvalidArgument</c> if the type of the value is not <c>Number</c>.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>The <c>double</c> value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ToInt32">
            <summary>
            Retrieves a <c>int</c> value of a <c>Number</c> value
            </summary>
            <remarks>
            <para>
            This function retrieves the value of a Number value. It will fail with
            <c>InvalidArgument</c> if the type of the value is not <c>Number</c>.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>The <c>int</c> value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ToString">
            <summary>
            Retrieves a string pointer of a <c>String</c> value
            </summary>
            <remarks>
            <para>
            This function retrieves the string pointer of a <c>String</c> value. It will fail with
            <c>InvalidArgument</c> if the type of the value is not <c>String</c>.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>The string</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ToObject">
            <summary>
            Retrieves a object representation of an <c>Object</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The object representation of the value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ConvertToBoolean">
            <summary>
            Converts a value to <c>Boolean</c> using regular JavaScript semantics
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ConvertToNumber">
            <summary>
            Converts a value to <c>Number</c> using regular JavaScript semantics
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ConvertToString">
            <summary>
            Converts a value to <c>String</c> using regular JavaScript semantics
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ConvertToObject">
            <summary>
            Converts a value to <c>Object</c> using regular JavaScript semantics
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.PreventExtension">
            <summary>
            Sets a object to not be extensible
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.GetOwnPropertyDescriptor(MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId)">
            <summary>
            Gets a property descriptor for an object's own property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property</param>
            <returns>The property descriptor</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.GetOwnPropertyNames">
            <summary>
            Gets a list of all properties on the object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>An array of property names</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.HasProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId)">
            <summary>
            Determines whether an object has a property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property</param>
            <returns>Whether the object (or a prototype) has the property</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.GetProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId)">
            <summary>
            Gets a object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="id">The ID of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.SetProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId,MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue,System.Boolean)">
            <summary>
            Sets a object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="id">The ID of the property</param>
            <param name="value">The new value of the property</param>
            <param name="useStrictRules">The property set should follow strict mode rules</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.DeleteProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId,System.Boolean)">
            <summary>
            Deletes a object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property</param>
            <param name="useStrictRules">The property set should follow strict mode rules</param>
            <returns>Whether the property was deleted</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.DefineProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId,MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Defines a new object's own property from a property descriptor
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property</param>
            <param name="propertyDescriptor">The property descriptor</param>
            <returns>Whether the property was defined</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.HasIndexedProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Test if an object has a value at the specified index
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="index">The index to test</param>
            <returns>Whether the object has an value at the specified index</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.GetIndexedProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Retrieve a value at the specified index of an object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="index">The index to retrieve</param>
            <returns>The retrieved value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.SetIndexedProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue,MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Sets a value at the specified index of an object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="index">The index to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.DeleteIndexedProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Delete a value at the specified index of an object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="index">The index to delete</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.Equals(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Compare two JavaScript values for equality
            </summary>
            <remarks>
            <para>
            This function is equivalent to the "==" operator in JavaScript.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="other">The object to compare</param>
            <returns>Whether the values are equal</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.StrictEquals(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Compare two JavaScript values for strict equality
            </summary>
            <remarks>
            <para>
            This function is equivalent to the "===" operator in JavaScript.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="other">The object to compare</param>
            <returns>Whether the values are strictly equal</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.CallFunction(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue[])">
            <summary>
            Invokes a function
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="arguments">The arguments to the call</param>
            <returns>The <c>Value</c> returned from the function invocation, if any</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue.ConstructObject(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue[])">
            <summary>
            Invokes a function as a constructor
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="arguments">The arguments to the call</param>
            <returns>The <c>Value</c> returned from the function invocation</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValueExtensions">
            <summary>
            Extensions for the âEdgeâ JavaScript value
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValueExtensions.GetOwnPropertyDescriptor(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue,System.String)">
            <summary>
            Gets a property descriptor for an object's own property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="propertyName">The name of the property</param>
            <returns>The property descriptor</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValueExtensions.HasProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue,System.String)">
            <summary>
            Determines whether an object has a property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="propertyName">The name of the property</param>
            <returns>Whether the object (or a prototype) has the property</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValueExtensions.GetProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue,System.String)">
            <summary>
            Gets an object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="name">The name of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValueExtensions.SetProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue,System.String,MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue,System.Boolean)">
            <summary>
            Sets an object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="name">The name of the property</param>
            <param name="value">The new value of the property</param>
            <param name="useStrictRules">The property set should follow strict mode rules</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValueExtensions.DeleteProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue,System.String,System.Boolean)">
            <summary>
            Deletes an object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="propertyName">The name of the property</param>
            <param name="useStrictRules">The property set should follow strict mode rules</param>
            <returns>Whether the property was deleted</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Edge.EdgeJsValueExtensions.DefineProperty(MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue,System.String,MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue)">
            <summary>
            Defines a new object's own property from a property descriptor
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="propertyName">The name of the property</param>
            <param name="propertyDescriptor">The property descriptor</param>
            <returns>Whether the property was defined</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Edge.EdgeNativeMethods">
            <summary>
            âEdgeâ native methods
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine">
            <summary>
            âIEâ JsRT version of Chakra JavaScript engine
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.LOWER_IE_VERSION">
            <summary>
            Lowest supported version of Internet Explorer
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine._jsRuntime">
            <summary>
            Instance of JavaScript runtime
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine._jsContext">
            <summary>
            Instance of JavaScript context
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine._isSupported">
            <summary>
            Flag indicating whether this JavaScript engine is supported
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine._supportSynchronizer">
            <summary>
            Support synchronizer
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.#ctor(System.Boolean)">
            <summary>
            Constructs an instance of the Chakra âIEâ JsRT JavaScript engine
            </summary>
            <param name="enableDebugging">Flag for whether to enable script debugging features</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.Finalize">
            <summary>
            Destructs an instance of the Chakra âIEâ JsRT JavaScript engine
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.CreateJsRuntime">
            <summary>
            Creates a instance of JavaScript runtime with special settings
            </summary>
            <returns>Instance of JavaScript runtime with special settings</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.IsSupported">
            <summary>
            Checks a support of the Chakra âIEâ JsRT JavaScript engine
            </summary>
            <returns>Result of check (true - supports; false - does not support)</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.MapToScriptType(System.Object)">
            <summary>
            Makes a mapping of value from the host type to a script type
            </summary>
            <param name="value">The source value</param>
            <returns>The mapped value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.MapToScriptType(System.Object[])">
            <summary>
            Makes a mapping of array items from the host type to a script type
            </summary>
            <param name="args">The source array</param>
            <returns>The mapped array</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.MapToHostType(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Makes a mapping of value from the script type to a host type
            </summary>
            <param name="value">The source value</param>
            <returns>The mapped value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.MapToHostType(MsieJavaScriptEngine.JsRt.Ie.IeJsValue[])">
            <summary>
            Makes a mapping of array itemp from the script type to a host type
            </summary>
            <param name="args">The source array</param>
            <returns>The mapped array</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.AddReferenceToValue(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Adds a reference to the value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.RemoveReferenceToValue(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Removes a reference to the value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.CanHaveReferences(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Checks whether the value can have references
            </summary>
            <param name="value">The value</param>
            <returns>Result of check (true - may have; false - may not have)</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.Dispose">
            <summary>
            Destroys object
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.Dispose(System.Boolean)">
            <summary>
            Destroys object
            </summary>
            <param name="disposing">Flag, allowing destruction of
            managed objects contained in fields of class</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IDebugApplication32">
            <summary>
            IDebugApplication32 COM interface
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IDebugApplication64">
            <summary>
            IDebugApplication64 COM interface
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IDebugDocumentHelper32">
            <summary>
            IDebugDocumentHelper32 COM interface
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IDebugDocumentHelper64">
            <summary>
            IDebugDocumentHelper64 COM interface
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IeJsContext">
            <summary>
            âIEâ script context
            </summary>
            <remarks>
            <para>
            Each script context contains its own global object, distinct from the global object in
            other script contexts.
            </para>
            <para>
            Many Chakra hosting APIs require an "active" script context, which can be set using
            Current. Chakra hosting APIs that require a current context to be set will note
            that explicitly in their documentation.
            </para>
            </remarks>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.IeJsContext._reference">
            <summary>
            The reference
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.Invalid">
            <summary>
            Gets a invalid context
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.Current">
            <summary>
            Gets or sets a current script context on the thread
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.HasException">
            <summary>
            Gets a value indicating whether the runtime of the current context is in an exception state
            </summary>
            <remarks>
            <para>
            If a call into the runtime results in an exception (either as the result of running a
            script or due to something like a conversion failure), the runtime is placed into an
            "exception state." All calls into any context created by the runtime (except for the
            exception APIs) will fail with <c>InExceptionState</c> until the exception is
            cleared.
            </para>
            <para>
            If the runtime of the current context is in the exception state when a callback returns
            into the engine, the engine will automatically rethrow the exception.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.IsEnumeratingHeap">
            <summary>
            Gets a value indicating whether the heap of the current context is being enumerated
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.Runtime">
            <summary>
            Gets a runtime that the context belongs to
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.IsValid">
            <summary>
            Gets a value indicating whether the context is a valid context or not
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Ie.IeJsContext"/> struct
            </summary>
            <param name="reference">The reference</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.Idle">
            <summary>
            Tells a runtime to do any idle processing it need to do
            </summary>
            <remarks>
            <para>
            If idle processing has been enabled for the current runtime, calling <c>Idle</c> will
            inform the current runtime that the host is idle and that the runtime can perform
            memory cleanup tasks.
            </para>
            <para>
            <c>Idle</c> will also return the number of system ticks until there will be more idle work
            for the runtime to do. Calling <c>Idle</c> before this number of ticks has passed will do
            no work.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>The next system tick when there will be more idle work to do. Returns the
            maximum number of ticks if there no upcoming idle work to do.</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.ParseScript(System.String,MsieJavaScriptEngine.JsRt.JsSourceContext,System.String)">
            <summary>
            Parses a script and returns a <c>Function</c> representing the script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to parse</param>
            <param name="sourceContext">The cookie identifying the script that can be used
            by script contexts that have debugging enabled</param>
            <param name="sourceName">The location the script came from</param>
            <returns>The <c>Function</c> representing the script code</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.ParseScript(System.String,System.Byte[],MsieJavaScriptEngine.JsRt.JsSourceContext,System.String)">
            <summary>
            Parses a serialized script and returns a <c>Function</c> representing the script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to parse</param>
            <param name="buffer">The serialized script</param>
            <param name="sourceContext">The cookie identifying the script that can be used
            by script contexts that have debugging enabled</param>
            <param name="sourceName">The location the script came from</param>
            <returns>The <c>Function</c> representing the script code</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.ParseScript(System.String)">
            <summary>
            Parses a script and returns a <c>Function</c> representing the script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to parse</param>
            <returns>The <c>Function</c> representing the script code</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.ParseScript(System.String,System.Byte[])">
            <summary>
            Parses a serialized script and returns a <c>Function</c> representing the script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to parse</param>
            <param name="buffer">The serialized script</param>
            <returns>The <c>Function</c> representing the script code</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.RunScript(System.String,MsieJavaScriptEngine.JsRt.JsSourceContext,System.String)">
            <summary>
            Executes a script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to run</param>
            <param name="sourceContext">The cookie identifying the script that can be used by script contexts that have debugging enabled</param>
            <param name="sourceName">The location the script came from</param>
            <returns>The result of the script, if any</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.RunScript(System.String,System.Byte[],MsieJavaScriptEngine.JsRt.JsSourceContext,System.String)">
            <summary>
            Runs a serialized script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The source code of the serialized script</param>
            <param name="buffer">The serialized script</param>
            <param name="sourceContext">The cookie identifying the script that can be used by script contexts that have debugging enabled</param>
            <param name="sourceName">The location the script came from</param>
            <returns>The result of the script, if any</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.RunScript(System.String)">
            <summary>
            Executes a script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The script to run</param>
            <returns>The result of the script, if any</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.RunScript(System.String,System.Byte[])">
            <summary>
            Runs a serialized script
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="script">The source code of the serialized script</param>
            <param name="buffer">The serialized script</param>
            <returns>The result of the script, if any</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.SerializeScript(System.String,System.Byte[])">
            <summary>
            Serializes a parsed script to a buffer than can be reused
            </summary>
            <remarks>
            <para>
            SerializeScript parses a script and then stores the parsed form of the script in a
            runtime-independent format. The serialized script then can be deserialized in any
            runtime without requiring the script to be re-parsed.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="script">The script to serialize</param>
            <param name="buffer">The buffer to put the serialized script into. Can be null.</param>
            <returns>The size of the buffer, in bytes, required to hold the serialized script</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.GetAndClearException">
            <summary>
            Returns a exception that caused the runtime of the current context to be in the
            exception state and resets the exception state for that runtime
            </summary>
            <remarks>
            <para>
            If the runtime of the current context is not in an exception state, this API will throw
            <c>JsErrorInvalidArgument</c>. If the runtime is disabled, this will return an exception
            indicating that the script was terminated, but it will not clear the exception (the
            exception will be cleared if the runtime is re-enabled using
            <c>EnableRuntimeExecution</c>).
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>The exception for the runtime of the current context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.SetException(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Sets a runtime of the current context to an exception state
            </summary>
            <remarks>
            <para>
            If the runtime of the current context is already in an exception state, this API will
            throw <c>JsErrorInExceptionState</c>.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="exception">The JavaScript exception to set for the runtime of the current context</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.StartDebugging(MsieJavaScriptEngine.JsRt.Ie.IDebugApplication64)">
            <summary>
            Starts debugging in the context
            </summary>
            <param name="debugApplication">The debug application to use for debugging</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.StartDebugging(MsieJavaScriptEngine.JsRt.Ie.IDebugApplication32)">
            <summary>
            Starts debugging in the context
            </summary>
            <param name="debugApplication">The debug application to use for debugging</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.StartProfiling(MsieJavaScriptEngine.JsRt.IActiveScriptProfilerCallback,MsieJavaScriptEngine.JsRt.ProfilerEventMask,System.Int32)">
            <summary>
            Starts profiling in the current context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="callback">The profiling callback to use</param>
            <param name="eventMask">The profiling events to callback with</param>
            <param name="context">The context to pass to the profiling callback</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.StopProfiling(System.Int32)">
            <summary>
            Stops profiling in the current context
            </summary>
            <remarks>
            <para>
            Will not return an error if profiling has not started.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="reason">The reason for stopping profiling to pass to the profiler callback</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.EnumerateHeap">
            <summary>
            Enumerates a heap of the current context
            </summary>
            <remarks>
            <para>
            While the heap is being enumerated, the current context cannot be removed, and all calls to
            modify the state of the context will fail until the heap enumerator is released.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>The heap enumerator</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.AddRef">
            <summary>
            Adds a reference to a script context
            </summary>
            <remarks>
            Calling AddRef ensures that the context will not be freed until Release is called.
            </remarks>
            <returns>The object's new reference count</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsContext.Release">
            <summary>
            Releases a reference to a script context
            </summary>
            <remarks>
            Removes a reference to a context that was created by AddRef.
            </remarks>
            <returns>The object's new reference count</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IeJsErrorHelpers">
            <summary>
            âIEâ error helpers
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsErrorHelpers.ThrowIfError(MsieJavaScriptEngine.JsRt.JsErrorCode)">
            <summary>
            Throws if a native method returns an error code
            </summary>
            <param name="error">The error</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsErrorHelpers.CreateError(System.String)">
            <summary>
            Creates a new JavaScript error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsErrorHelpers.CreateRangeError(System.String)">
            <summary>
            Creates a new JavaScript RangeError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsErrorHelpers.CreateReferenceError(System.String)">
            <summary>
            Creates a new JavaScript ReferenceError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsErrorHelpers.CreateSyntaxError(System.String)">
            <summary>
            Creates a new JavaScript SyntaxError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsErrorHelpers.CreateTypeError(System.String)">
            <summary>
            Creates a new JavaScript TypeError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsErrorHelpers.CreateUriError(System.String)">
            <summary>
            Creates a new JavaScript URIError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">The message that describes the error</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsErrorHelpers.SetException(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Sets a exception
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="exception">The error object</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IeJsNativeFunction">
            <summary>
            âIEâ function callback
            </summary>
            <param name="callee">The <c>Function</c> object that represents the function being invoked</param>
            <param name="isConstructCall">Indicates whether this is a regular call or a 'new' call</param>
            <param name="arguments">The arguments to the call</param>
            <param name="argumentCount">The number of arguments</param>
            <param name="callbackData">Callback data, if any</param>
            <returns>The result of the call, if any</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId">
            <summary>
            âIEâ property identifier
            </summary>
            <remarks>
            Property identifiers are used to refer to properties of JavaScript objects instead of using
            strings.
            </remarks>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId._id">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId.Invalid">
            <summary>
            Gets a invalid ID
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId.Name">
            <summary>
            Gets a name associated with the property ID
            </summary>
            <remarks>
            <para>
            Requires an active script context.
            </para>
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId"/> struct
            </summary>
            <param name="id">The ID</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId.FromString(System.String)">
            <summary>
            Gets a property ID associated with the name
            </summary>
            <remarks>
            <para>
            Property IDs are specific to a context and cannot be used across contexts.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="name">
            The name of the property ID to get or create. The name may consist of only digits.
            </param>
            <returns>The property ID in this runtime for the given name</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId.op_Equality(MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId,MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId)">
            <summary>
            The equality operator for property IDs
            </summary>
            <param name="left">The first property ID to compare</param>
            <param name="right">The second property ID to compare</param>
            <returns>Whether the two property IDs are the same</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId.op_Inequality(MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId,MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId)">
            <summary>
            The inequality operator for property IDs
            </summary>
            <param name="left">The first property ID to compare</param>
            <param name="right">The second property ID to compare</param>
            <returns>Whether the two property IDs are not the same</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId.Equals(System.Object)">
            <summary>
            Checks for equality between property IDs
            </summary>
            <param name="obj">The other property ID to compare</param>
            <returns>Whether the two property IDs are the same</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId.GetHashCode">
            <summary>
            The hash code
            </summary>
            <returns>The hash code of the property ID</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId.ToString">
            <summary>
            Converts a property ID to a string
            </summary>
            <returns>The name of the property ID</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId.Equals(MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId)">
            <summary>
            Checks for equality between property IDs
            </summary>
            <param name="other">The other property ID to compare</param>
            <returns>Whether the two property IDs are the same</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime">
            <summary>
            âIEâ Chakra runtime
            </summary>
            <remarks>
            <para>
            Each Chakra runtime has its own independent execution engine, JIT compiler, and garbage
            collected heap. As such, each runtime is completely isolated from other runtimes.
            </para>
            <para>
            Runtimes can be used on any thread, but only one thread can call into a runtime at any
            time.
            </para>
            <para>
            NOTE: A <see cref="T:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime" />, unlike other objects in the Chakra hosting API, is not
            garbage collected since it contains the garbage collected heap itself. A runtime will
            continue to exist until Dispose is called.
            </para>
            </remarks>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime._handle">
            <summary>
            The handle
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.IsValid">
            <summary>
            Gets a value indicating whether the runtime is valid
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.MemoryUsage">
            <summary>
            Gets a current memory usage for a runtime
            </summary>
            <remarks>
            Memory usage can be always be retrieved, regardless of whether or not the runtime is active
            on another thread.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.MemoryLimit">
            <summary>
            Gets or sets a current memory limit for a runtime
            </summary>
            <remarks>
            The memory limit of a runtime can be always be retrieved, regardless of whether or not the
            runtime is active on another thread.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.Disabled">
            <summary>
            Gets or sets a value indicating whether script execution is disabled in the runtime
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.Create">
            <summary>
            Creates a new runtime
            </summary>
            <returns>The runtime created</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.Create(MsieJavaScriptEngine.JsRt.JsRuntimeAttributes,MsieJavaScriptEngine.JsRt.JsRuntimeVersion)">
            <summary>
            Creates a new runtime
            </summary>
            <param name="attributes">The attributes of the runtime to be created</param>
            <param name="version">The version of the runtime to be created</param>
            <returns>The runtime created</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.Create(MsieJavaScriptEngine.JsRt.JsRuntimeAttributes,MsieJavaScriptEngine.JsRt.JsRuntimeVersion,MsieJavaScriptEngine.JsRt.JsThreadServiceCallback)">
            <summary>
            Creates a new runtime
            </summary>
            <param name="attributes">The attributes of the runtime to be created</param>
            <param name="version">The version of the runtime to be created</param>
            <param name="threadServiceCallback">The thread service for the runtime. Can be null.</param>
            <returns>The runtime created</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.CollectGarbage">
            <summary>
            Performs a full garbage collection
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.SetMemoryAllocationCallback(System.IntPtr,MsieJavaScriptEngine.JsRt.JsMemoryAllocationCallback)">
            <summary>
            Sets a memory allocation callback for specified runtime
            </summary>
            <remarks>
            <para>
            Registering a memory allocation callback will cause the runtime to call back to the host
            whenever it acquires memory from, or releases memory to, the OS. The callback routine is
            called before the runtime memory manager allocates a block of memory. The allocation will
            be rejected if the callback returns false. The runtime memory manager will also invoke the
            callback routine after freeing a block of memory, as well as after allocation failures.
            </para>
            <para>
            The callback is invoked on the current runtime execution thread, therefore execution is
            blocked until the callback completes.
            </para>
            <para>
            The return value of the callback is not stored; previously rejected allocations will not
            prevent the runtime from invoking the callback again later for new memory allocations.
            </para>
            </remarks>
            <param name="callbackState">
            User provided state that will be passed back to the callback
            </param>
            <param name="allocationCallback">
            Memory allocation callback to be called for memory allocation events
            </param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.SetBeforeCollectCallback(System.IntPtr,MsieJavaScriptEngine.JsRt.JsBeforeCollectCallback)">
            <summary>
            Sets a callback function that is called by the runtime before garbage collection
            </summary>
            <remarks>
            <para>
            The callback is invoked on the current runtime execution thread, therefore execution is
            blocked until the callback completes.
            </para>
            <para>
            The callback can be used by hosts to prepare for garbage collection. For example, by
            releasing unnecessary references on Chakra objects.
            </para>
            </remarks>
            <param name="callbackState">User provided state that will be passed back to the callback</param>
            <param name="beforeCollectCallback">The callback function being set</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.CreateContext(MsieJavaScriptEngine.JsRt.Ie.IDebugApplication64)">
            <summary>
            Creates a debug script context for running scripts
            </summary>
            <remarks>
            Each script context has its own global object that is isolated from all other script
            contexts.
            </remarks>
            <param name="debugApplication">The debug application to use</param>
            <returns>The created script context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.CreateContext(MsieJavaScriptEngine.JsRt.Ie.IDebugApplication32)">
            <summary>
            Creates a debug script context for running scripts
            </summary>
            <remarks>
            Each script context has its own global object that is isolated from all other script
            contexts.
            </remarks>
            <param name="debugApplication">The debug application to use</param>
            <returns>The created script context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.CreateContext">
            <summary>
            Creates a script context for running scripts
            </summary>
            <remarks>
            Each script context has its own global object that is isolated from all other script
            contexts.
            </remarks>
            <returns>The created script context</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime.Dispose">
            <summary>
            Disposes a runtime
            </summary>
            <remarks>
            Once a runtime has been disposed, all resources owned by it are invalid and cannot be used.
            If the runtime is active (i.e. it is set to be current on a particular thread), it cannot
            be disposed.
            </remarks>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IeJsScope">
            <summary>
            âIEâ scope automatically sets a context to current and resets the original context
            when disposed
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.IeJsScope._previousContext">
            <summary>
            The previous context
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.IeJsScope._disposedFlag">
            <summary>
            Whether the structure has been disposed
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsScope.#ctor(MsieJavaScriptEngine.JsRt.Ie.IeJsContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Ie.IeJsScope"/> struct
            </summary>
            <param name="context">The context to create the scope for</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsScope.Dispose">
            <summary>
            Disposes the scope and sets the previous context to current
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IeJsScriptException">
            <summary>
            âIEâ script exception
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.IeJsScriptException._error">
            <summary>
            The error
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsScriptException.Error">
            <summary>
            Gets a JavaScript object representing the script error
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsScriptException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode,MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Ie.IeJsScriptException"/> class
            </summary>
            <param name="errorCode">The error code returned</param>
            <param name="error">The JavaScript error object</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsScriptException.#ctor(MsieJavaScriptEngine.JsRt.JsErrorCode,MsieJavaScriptEngine.JsRt.Ie.IeJsValue,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Ie.IeJsScriptException"/> class
            with a specified error message
            </summary>
            <param name="errorCode">The error code returned</param>
            <param name="error">The JavaScript error object</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Ie.IeJsScriptException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IeJsValue">
            <summary>
            âIEâ JavaScript value
            </summary>
            <remarks>
            The JavaScript value is one of the following types of values: Undefined, Null, Boolean,
            String, Number, or Object.
            </remarks>
        </member>
        <member name="F:MsieJavaScriptEngine.JsRt.Ie.IeJsValue._reference">
            <summary>
            The reference
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.Invalid">
            <summary>
            Gets a invalid value
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.Undefined">
            <summary>
            Gets a value of <c>undefined</c> in the current script context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.Null">
            <summary>
            Gets a value of <c>null</c> in the current script context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.True">
            <summary>
            Gets a value of <c>true</c> in the current script context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.False">
            <summary>
            Gets a value of <c>false</c> in the current script context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.GlobalObject">
            <summary>
            Gets a global object in the current script context
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.IsValid">
            <summary>
            Gets a value indicating whether the value is valid
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ValueType">
            <summary>
            Gets a JavaScript type of the value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The type of the value</returns>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.StringLength">
            <summary>
            Gets a length of a <c>String</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The length of the string</returns>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.Prototype">
            <summary>
            Gets or sets a prototype of an object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.IsExtensionAllowed">
            <summary>
            Gets a value indicating whether an object is extensible or not
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.HasExternalData">
            <summary>
            Gets a value indicating whether an object is an external object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="P:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ExternalData">
            <summary>
            Gets or sets the data in an external object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:MsieJavaScriptEngine.JsRt.Ie.IeJsValue"/> struct
            </summary>
            <param name="reference">The reference</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.FromBoolean(System.Boolean)">
            <summary>
            Creates a <c>Boolean</c> value from a <c>bool</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="value">The value to be converted</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.FromDouble(System.Double)">
            <summary>
            Creates a <c>Number</c> value from a <c>double</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="value">The value to be converted</param>
            <returns>The new <c>Number</c> value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.FromInt32(System.Int32)">
            <summary>
            Creates a <c>Number</c> value from a <c>int</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="value">The value to be converted</param>
            <returns>The new <c>Number</c> value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.FromString(System.String)">
            <summary>
            Creates a <c>String</c> value from a string pointer
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="value">The string  to convert to a <c>String</c> value</param>
            <returns>The new <c>String</c> value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.FromObject(System.Object)">
            <summary>
            Creates a JavaScript value that is a projection of the passed in object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="value">The object to be projected</param>
            <returns>The JavaScript value that is a projection of the object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateObject">
            <summary>
            Creates a new <c>Object</c>
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The new <c>Object</c></returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateExternalObject(System.IntPtr,MsieJavaScriptEngine.JsRt.JsObjectFinalizeCallback)">
            <summary>
            Creates a new <c>Object</c> that stores some external data
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="data">External data that the object will represent. May be null.</param>
            <param name="finalizer">A callback for when the object is finalized. May be null.</param>
            <returns>The new <c>Object</c></returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateFunction(MsieJavaScriptEngine.JsRt.Ie.IeJsNativeFunction)">
            <summary>
            Creates a new JavaScript function
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="function">The method to call when the function is invoked</param>
            <returns>The new function object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateFunction(MsieJavaScriptEngine.JsRt.Ie.IeJsNativeFunction,System.IntPtr)">
            <summary>
            Creates a new JavaScript function
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="function">The method to call when the function is invoked</param>
            <param name="callbackData">Data to be provided to all function callbacks</param>
            <returns>The new function object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateArray(System.UInt32)">
            <summary>
            Creates a JavaScript array object
            </summary>
            <remarks>
            Requires an active script context
            </remarks>
            <param name="length">The initial length of the array</param>
            <returns>The new array object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateError(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Creates a new JavaScript error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateRangeError(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Creates a new JavaScript RangeError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateReferenceError(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Creates a new JavaScript ReferenceError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateSyntaxError(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Creates a new JavaScript SyntaxError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateTypeError(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Creates a new JavaScript TypeError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CreateUriError(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Creates a new JavaScript URIError error object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="message">Message for the error object</param>
            <returns>The new error object</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.AddRef">
            <summary>
            Adds a reference to the object
            </summary>
            <remarks>
            This only needs to be called on objects that are not going to be stored somewhere on
            the stack. Calling AddRef ensures that the JavaScript object the value refers to will not be freed
            until Release is called
            </remarks>
            <returns>The object's new reference count</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.Release">
            <summary>
            Releases a reference to the object
            </summary>
            <remarks>
            Removes a reference that was created by AddRef.
            </remarks>
            <returns>The object's new reference count</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ToBoolean">
            <summary>
            Retrieves a <c>bool</c> value of a <c>Boolean</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ToDouble">
            <summary>
            Retrieves a <c>double</c> value of a <c>Number</c> value
            </summary>
            <remarks>
            <para>
            This function retrieves the value of a Number value. It will fail with
            <c>InvalidArgument</c> if the type of the value is not <c>Number</c>.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>The <c>double</c> value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ToString">
            <summary>
            Retrieves a string pointer of a <c>String</c> value
            </summary>
            <remarks>
            <para>
            This function retrieves the string pointer of a <c>String</c> value. It will fail with
            <c>InvalidArgument</c> if the type of the value is not <c>String</c>.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <returns>The string</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ToObject">
            <summary>
            Retrieves a object representation of an <c>Object</c> value
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The object representation of the value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ConvertToBoolean">
            <summary>
            Converts a value to <c>Boolean</c> using regular JavaScript semantics
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ConvertToNumber">
            <summary>
            Converts a value to <c>Number</c> using regular JavaScript semantics
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ConvertToString">
            <summary>
            Converts a value to <c>String</c> using regular JavaScript semantics
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ConvertToObject">
            <summary>
            Converts a value to <c>Object</c> using regular JavaScript semantics
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The converted value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.PreventExtension">
            <summary>
            Sets a object to not be extensible
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.GetOwnPropertyDescriptor(MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId)">
            <summary>
            Gets a property descriptor for an object's own property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property</param>
            <returns>The property descriptor</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.GetOwnPropertyNames">
            <summary>
            Gets a list of all properties on the object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <returns>The array of property names</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.HasProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId)">
            <summary>
            Determines whether an object has a property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property</param>
            <returns>Whether the object (or a prototype) has the property</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.GetProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId)">
            <summary>
            Gets a object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="id">The ID of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.SetProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId,MsieJavaScriptEngine.JsRt.Ie.IeJsValue,System.Boolean)">
            <summary>
            Sets a object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="id">The ID of the property</param>
            <param name="value">The new value of the property</param>
            <param name="useStrictRules">The property set should follow strict mode rules</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.DeleteProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId,System.Boolean)">
            <summary>
            Deletes a object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property</param>
            <param name="useStrictRules">The property set should follow strict mode rules</param>
            <returns>Whether the property was deleted</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.DefineProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId,MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Defines a new object's own property from a property descriptor
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property</param>
            <param name="propertyDescriptor">The property descriptor</param>
            <returns>Whether the property was defined</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.HasIndexedProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Test if an object has a value at the specified index
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="index">The index to test</param>
            <returns>Whether the object has an value at the specified index</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.GetIndexedProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Retrieve a value at the specified index of an object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="index">The index to retrieve</param>
            <returns>The retrieved value</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.SetIndexedProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsValue,MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Set a value at the specified index of an object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="index">The index to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.DeleteIndexedProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Deletes a value at the specified index of an object
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="index">The index to delete</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.Equals(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Compare two JavaScript values for equality
            </summary>
            <remarks>
            <para>
            This function is equivalent to the "==" operator in JavaScript.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="other">The object to compare</param>
            <returns>Whether the values are equal</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.StrictEquals(MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Compare two JavaScript values for strict equality
            </summary>
            <remarks>
            <para>
            This function is equivalent to the "===" operator in JavaScript.
            </para>
            <para>
            Requires an active script context.
            </para>
            </remarks>
            <param name="other">The object to compare</param>
            <returns>Whether the values are strictly equal</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CallFunction(MsieJavaScriptEngine.JsRt.Ie.IeJsValue[])">
            <summary>
            Invokes a function
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="arguments">The arguments to the call</param>
            <returns>The <c>Value</c> returned from the function invocation, if any</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValue.ConstructObject(MsieJavaScriptEngine.JsRt.Ie.IeJsValue[])">
            <summary>
            Invokes a function as a constructor
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="arguments">The arguments to the call</param>
            <returns>The <c>Value</c> returned from the function invocation</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IeJsValueExtensions">
            <summary>
            Extensions for the âIEâ JavaScript value
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValueExtensions.GetOwnPropertyDescriptor(MsieJavaScriptEngine.JsRt.Ie.IeJsValue,System.String)">
            <summary>
            Gets a property descriptor for an object's own property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="propertyName">The name of the property</param>
            <returns>The property descriptor</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValueExtensions.HasProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsValue,System.String)">
            <summary>
            Determines whether an object has a property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="propertyName">The name of the property</param>
            <returns>Whether the object (or a prototype) has the property</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValueExtensions.GetProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsValue,System.String)">
            <summary>
            Gets an object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="name">The name of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValueExtensions.SetProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsValue,System.String,MsieJavaScriptEngine.JsRt.Ie.IeJsValue,System.Boolean)">
            <summary>
            Sets an object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="name">The name of the property</param>
            <param name="value">The new value of the property</param>
            <param name="useStrictRules">The property set should follow strict mode rules</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValueExtensions.DeleteProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsValue,System.String,System.Boolean)">
            <summary>
            Deletes an object's property
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="propertyName">The name of the property</param>
            <param name="useStrictRules">The property set should follow strict mode rules</param>
            <returns>Whether the property was deleted</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IeJsValueExtensions.DefineProperty(MsieJavaScriptEngine.JsRt.Ie.IeJsValue,System.String,MsieJavaScriptEngine.JsRt.Ie.IeJsValue)">
            <summary>
            Defines a new object's own property from a property descriptor
            </summary>
            <remarks>
            Requires an active script context.
            </remarks>
            <param name="source">The JavaScript value</param>
            <param name="propertyName">The name of the property</param>
            <param name="propertyDescriptor">The property descriptor</param>
            <returns>Whether the property was defined</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IeNativeMethods">
            <summary>
            âIEâ native methods
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager32">
            <summary>
            IProcessDebugManager32 COM interface
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager32.CreateApplication(MsieJavaScriptEngine.JsRt.Ie.IDebugApplication32@)">
            <summary>
            Creates a new debug application
            </summary>
            <param name="debugApplication">The new debug application</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager32.GetDefaultApplication(MsieJavaScriptEngine.JsRt.Ie.IDebugApplication32@)">
            <summary>
            Gets a default debug application
            </summary>
            <param name="debugApplication">The default debug application</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager32.AddApplication(MsieJavaScriptEngine.JsRt.Ie.IDebugApplication32,System.UInt32@)">
            <summary>
            Adds a new debug application
            </summary>
            <param name="debugApplication">The new debug application</param>
            <param name="cookie">An engine-defined cookie</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager32.RemoveApplication(System.UInt32)">
            <summary>
            Removes a debug application
            </summary>
            <param name="cookie">The cookie of the debug application to remove</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager32.CreateDebugDocumentHelper(System.Object,MsieJavaScriptEngine.JsRt.Ie.IDebugDocumentHelper32@)">
            <summary>
            Creates a debug document helper
            </summary>
            <param name="outerUnknown">The outer unknown</param>
            <param name="helper">The new debug document helper</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager64">
            <summary>
            IProcessDebugManager64 COM interface
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager64.CreateApplication(MsieJavaScriptEngine.JsRt.Ie.IDebugApplication64@)">
            <summary>
            Creates a new debug application
            </summary>
            <param name="debugApplication">The new debug application</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager64.GetDefaultApplication(MsieJavaScriptEngine.JsRt.Ie.IDebugApplication64@)">
            <summary>
            Gets a default debug application
            </summary>
            <param name="debugApplication">The default debug application</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager64.AddApplication(MsieJavaScriptEngine.JsRt.Ie.IDebugApplication64,System.UInt32@)">
            <summary>
            Adds a new debug application
            </summary>
            <param name="debugApplication">The new debug application</param>
            <param name="cookie">An engine-defined cookie</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager64.RemoveApplication(System.UInt32)">
            <summary>
            Removes a debug application
            </summary>
            <param name="cookie">The cookie of the debug application to remove</param>
        </member>
        <member name="M:MsieJavaScriptEngine.JsRt.Ie.IProcessDebugManager64.CreateDebugDocumentHelper(System.Object,MsieJavaScriptEngine.JsRt.Ie.IDebugDocumentHelper64@)">
            <summary>
            Creates a debug document helper
            </summary>
            <param name="outerUnknown">The outer unknown</param>
            <param name="helper">The new debug document helper</param>
        </member>
        <member name="T:MsieJavaScriptEngine.JsRt.Ie.ProcessDebugManager">
            <summary>
            ProcessDebugManager COM interface
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.Resources.CommonStrings">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.ResourceManager">
            <summary>
            Returns a cached ResourceManager instance used by this class
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Culture">
            <summary>
            Overrides a current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Common_ArgumentIsEmpty">
            <summary>
            Looks up a localized string similar to "The parameter '{0}' must be a non-empty string."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Common_ArgumentIsNull">
            <summary>
            Looks up a localized string similar to "The parameter '{0}' must be a non-nullable."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Common_CannotConvertObjectToType">
            <summary>
            Looks up a localized string similar to "Cannot convert object of type `{0}` to type `{1}`."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Common_FileNotExist">
            <summary>
            Looks up a localized string similar to "File '{0}' not exist."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Common_ValueTypeCannotBeNull">
            <summary>
            Looks up a localized string similar to "Cannot convert null to a value type."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.ErrorDetails_Category">
            <summary>
            Looks up a localized string similar to "Category"
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.ErrorDetails_ColumnNumber">
            <summary>
            Looks up a localized string similar to "Column number"
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.ErrorDetails_EngineMode">
            <summary>
            Looks up a localized string similar to "Engine mode"
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.ErrorDetails_ErrorCode">
            <summary>
            Looks up a localized string similar to "Error code"
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.ErrorDetails_LineNumber">
            <summary>
            Looks up a localized string similar to "Line number"
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.ErrorDetails_Message">
            <summary>
            Looks up a localized string similar to "Message"
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.ErrorDetails_SourceFragment">
            <summary>
            Looks up a localized string similar to "Source fragment"
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Resources_ResourceIsNull">
            <summary>
            Looks up a localized string similar to "Resource with name '{0}' is null."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_EdgeJsEngineNotLoaded">
            <summary>
            Looks up a localized string similar to "Failed to load a Chakra Edge JsRT JavaScript engine. Try to install the Windows 10 with Edge..."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_EmbeddedHostObjectTypeNotSupported">
            <summary>
            Looks up a localized string similar to "The embedded host object '{0}' has a type `{1}`, which is not supported."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_EmbeddedHostTypeNotSupported">
            <summary>
            Looks up a localized string similar to "The embedded host type `{0}` is not supported."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_FunctionNotExist">
            <summary>
            Looks up a localized string similar to "The function with the name '{0}' does not exist."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_FunctionParameterTypeNotSupported">
            <summary>
            Looks up a localized string similar to "One of the function parameters '{0}' has a type `{1}`, which is not supported."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_IeJsEngineNotLoaded">
            <summary>
            Looks up a localized string similar to "Failed to load a {0} JavaScript engine. Try to install the Internet Explorer {1} or higher. See more..."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_InvalidFunctionNameFormat">
            <summary>
            Looks up a localized string similar to "The function name '{0}' has incorrect format."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_InvalidScriptItemNameFormat">
            <summary>
            Looks up a localized string similar to "The script item name '{0}' has incorrect format."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_InvalidVariableNameFormat">
            <summary>
            Looks up a localized string similar to "The variable name '{0}' has incorrect format."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_JsEngineModeNotSupported">
            <summary>
            Looks up a localized string similar to "Selected '{0}' mode of JavaScript engine is not supported."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_JsEnginesConflictInProcess">
            <summary>
            Looks up a localized string similar to "It is prohibited to use the {0} and {1} engines in one process."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_JsEnginesConflictOnMachine">
            <summary>
            Looks up a localized string similar to "It is prohibited to use the Chakra JsRT and Chakra ActiveScript engines on one machine at a time."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_ReturnValueTypeNotSupported">
            <summary>
            Looks up a localized string similar to "The type of return value `{0}` is not supported."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.CommonStrings.Runtime_VariableTypeNotSupported">
            <summary>
            Looks up a localized string similar to "The variable '{0}' has a type `{1}`, which is not supported."
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.Resources.NetFrameworkStrings">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.NetFrameworkStrings.ResourceManager">
            <summary>
            Returns a cached ResourceManager instance used by this class
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.NetFrameworkStrings.Culture">
            <summary>
            Overrides a current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.NetFrameworkStrings.Runtime_ActiveScriptDispatcherNotInitialized">
            <summary>
            Looks up a localized string similar to "ActiveScript dispatcher is not initialized."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.NetFrameworkStrings.Runtime_ActiveScriptLanguageVersionSelectionFailed">
            <summary>
            Looks up a localized string similar to "Failed to set '{0}' version of script language for the ActiveScript JavaScript engine."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.NetFrameworkStrings.Runtime_InvalidParserImplementationError">
            <summary>
            Looks up a localized string similar to "The parser you passed implements neither `IActiveScriptParse32` nor `IActiveScriptParse64`."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.NetFrameworkStrings.Runtime_ItemNotFound">
            <summary>
            Looks up a localized string similar to "Item with name '{0}' not found."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.NetFrameworkStrings.Runtime_JsEnginesNotFound">
            <summary>
            Looks up a localized string similar to "Could not found none of the JavaScript engines. Perhaps you have not installed the Internet Explorer..."
            </summary>
        </member>
        <member name="P:MsieJavaScriptEngine.Resources.NetFrameworkStrings.Runtime_VariableNotExist">
            <summary>
            Looks up a localized string similar to "The variable with the name '{0}' does not exist."
            </summary>
        </member>
        <member name="T:MsieJavaScriptEngine.Utilities.StringBuilderExtensions">
            <summary>
            Extensions for StringBuilder
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.Utilities.StringBuilderExtensions._formatPlaceholderRegExp">
            <summary>
            Regular expression for format placeholder
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder)">
            <summary>
            Appends the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder"/> instance
            </summary>
            <param name="source">Instance of <see cref="T:System.Text.StringBuilder"/></param>
            <returns>Instance of <see cref="T:System.Text.StringBuilder"/></returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, with default line terminator to this instance.
            Each format item is replaced by the string representation of a corresponding
            argument in a parameter array.
            </summary>
            <param name="source">Instance of <see cref="T:System.Text.StringBuilder"/></param>
            <param name="format">A composite format string</param>
            <param name="args">An array of objects to format</param>
            <returns>Instance of <see cref="T:System.Text.StringBuilder"/></returns>
        </member>
        <member name="T:MsieJavaScriptEngine.Utilities.TypeConverter">
            <summary>
            Type converter
            </summary>
        </member>
        <member name="F:MsieJavaScriptEngine.Utilities.TypeConverter._primitiveTypeCodes">
            <summary>
            List of primitive type codes
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.TypeConverter.ConvertToType``1(System.Object)">
            <summary>
            Converts the specified value to the specified type
            </summary>
            <typeparam name="T">The type to convert the value to</typeparam>
            <param name="value">The value to convert</param>
            <returns>The value that has been converted to the target type</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.TypeConverter.ConvertToType(System.Object,System.Type)">
            <summary>
            Converts the specified value to the specified type
            </summary>
            <param name="value">The value to convert</param>
            <param name="targetType">The type to convert the value to</param>
            <returns>The value that has been converted to the target type</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.TypeConverter.TryConvertToType``1(System.Object,``0@)">
            <summary>
            Converts the specified value to the specified type.
            A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="T">The type to convert the value to</typeparam>
            <param name="value">The value to convert</param>
            <param name="convertedValue">The value that has been converted to the target type</param>
            <returns>Result of conversion (true - success; false - failure)</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.TypeConverter.TryConvertToType(System.Object,System.Type,System.Object@)">
            <summary>
            Converts the specified value to the specified type.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="value">The value to convert</param>
            <param name="targetType">The type to convert the value to</param>
            <param name="convertedValue">The value that has been converted to the target type</param>
            <returns>Result of conversion (true - success; false - failure)</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.TypeConverter.IsPrimitiveType(System.Type)">
            <summary>
            Checks whether .NET type is primitive
            </summary>
            <param name="type">.NET type</param>
            <returns>Result of check (true - is primitive; false - is not primitive)</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.TypeConverter.IsPrimitiveType(System.TypeCode)">
            <summary>
            Checks whether .NET type is primitive
            </summary>
            <param name="typeCode">.NET type code</param>
            <returns>Result of check (true - is primitive; false - is not primitive)</returns>
        </member>
        <member name="T:MsieJavaScriptEngine.Utilities.TypeExtensions">
            <summary>
            Type extensions
            </summary>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.TypeExtensions.GetTypeCode(System.Type)">
            <summary>
            Gets a underlying type code of the specified <see cref="T:System.Type"/>
            </summary>
            <param name="source">The type whose underlying type code to get</param>
            <returns>The code of the underlying type</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.Utils.Is64BitProcess">
            <summary>
            Determines whether the current process is a 64-bit process
            </summary>
            <returns>true if the process is 64-bit; otherwise, false</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.Utils.GetResourceAsString(System.String,System.Type)">
            <summary>
            Gets a content of the embedded resource as string
            </summary>
            <param name="resourceName">The case-sensitive resource name without the namespace of the specified type</param>
            <param name="type">The type, that determines the assembly and whose namespace is used to scope
            the resource name</param>
            <returns>Ð¡ontent of the embedded resource as string</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.Utils.GetResourceAsString(System.String,System.Reflection.Assembly)">
            <summary>
            Gets a content of the embedded resource as string
            </summary>
            <param name="resourceName">The case-sensitive resource name</param>
            <param name="assembly">The assembly, which contains the embedded resource</param>
            <returns>Ð¡ontent of the embedded resource as string</returns>
        </member>
        <member name="M:MsieJavaScriptEngine.Utilities.Utils.GetFileTextContent(System.String,System.Text.Encoding)">
            <summary>
            Gets a text content of the specified file
            </summary>
            <param name="path">File path</param>
            <param name="encoding">Content encoding</param>
            <returns>Text content</returns>
        </member>
    </members>
</doc>
